<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fancxxy&#39;s blog</title>
  
  
  <link href="https://fancxxy.github.io/atom.xml" rel="self"/>
  
  <link href="https://fancxxy.github.io/"/>
  <updated>2022-07-01T07:50:13.767Z</updated>
  <id>https://fancxxy.github.io/</id>
  
  <author>
    <name>fancxxy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>位运算实现加减乘除</title>
    <link href="https://fancxxy.github.io/2022/07/01/bit-operation-add-subtract-multiply-divide/"/>
    <id>https://fancxxy.github.io/2022/07/01/bit-operation-add-subtract-multiply-divide/</id>
    <published>2022-07-01T07:27:44.000Z</published>
    <updated>2022-07-01T07:50:13.767Z</updated>
    
    <content type="html"><![CDATA[<p><code>a&amp;b</code>按位与，目的是把某些位置0，查看变量的最后一位是不是1可以写成<code>a &amp; 0x01 == 1</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 口诀是有0就是0</span><br><span class="line">0 &amp; 0 = 0</span><br><span class="line">0 &amp; 1 = 0</span><br><span class="line">1 &amp; 0 = 0</span><br><span class="line">1 &amp; 1 = 1</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>a|b</code>按位或，目的是把某些位置1，把变量的最后两位置1可以写成<code>a | 0x03</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 口诀是有1就是1</span><br><span class="line">0 | 0 = 0</span><br><span class="line">0 | 1 = 1</span><br><span class="line">1 | 0 = 1</span><br><span class="line">1 | 1 = 1</span><br></pre></td></tr></table></figure><p><code>a^b</code>按位异或，相当于不进位的加法，作为半加器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 口诀是相同为0不同为1</span><br><span class="line">0 ^ 0 = 0</span><br><span class="line">0 ^ 1 = 1</span><br><span class="line">1 ^ 0 = 1</span><br><span class="line">1 ^ 1 = 0</span><br></pre></td></tr></table></figure><p><code>~a</code>按位取反，Go语言里写作<code>^a</code>，负数的补码是把正数取反加一，<code>~a + 1 == -a</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^0 = 1</span><br><span class="line">^1 = 0</span><br></pre></td></tr></table></figure><p><code>a&lt;&lt;b</code>左移操作，左边丢弃，右边补0，相当于<code>a * 2^b</code>。</p><p><code>a&gt;&gt;b</code>右移操作，正数左边补0，负数左边补1，右边丢弃，相当于<code>a / 2^b</code>。</p><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p><code>a^b</code>是不进位的加法，<code>a&amp;b&lt;&lt;1</code>是只进位的加法，得到的两个结果重复不进位和只进位，直到只进位&#x3D;&#x3D;0，不进位就是加法的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4 + 5 = 9</span><br><span class="line">      0000 0100 = 4</span><br><span class="line">      0000 0101 = 5</span><br><span class="line">      -------------</span><br><span class="line">   ^  0000 0001</span><br><span class="line">&amp;&lt;&lt;1  0000 1000</span><br><span class="line">      -------------</span><br><span class="line">   ^  0000 1001 = 9</span><br><span class="line">&amp;&lt;&lt;1  0000 0000 = 0</span><br></pre></td></tr></table></figure><p>代码实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> b != <span class="number">0</span> &#123;</span><br><span class="line">        a, b = a ^ b, a &amp; b &lt;&lt; <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d + %d = %d\n&quot;</span>, a, b, add(a, b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// 4 + 5 = 9</span></span><br></pre></td></tr></table></figure><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p><code>a - b</code>等于<code>a + (-b)</code>，相反数可以通过取反加一实现，也就是<code>add(^b, 1)</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subtract</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> add(a, add(^b, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d - %d = %d\n&quot;</span>, a, b, subtract(a, b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// 4 - 5 = -1</span></span><br></pre></td></tr></table></figure><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p><code>a * b</code>看作是b数量个a相加，a和b都要取绝对值，最终结果值的符号和<code>a^b</code>相同。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">var</span> c, d, e <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">c = add(^a, <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c = a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> b &lt; <span class="number">0</span> &#123;</span><br><span class="line">d = add(^b, <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">d = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; d; i++ &#123;</span><br><span class="line">e = e + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a^b &lt; <span class="number">0</span> &#123;</span><br><span class="line">e = add(^e, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="number">-4</span>, <span class="number">5</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d * %d = %d\n&quot;</span>, a, b, multiply(a, b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// -4 * 5 = -20</span></span><br></pre></td></tr></table></figure><p>上面的方法加法次数过多，可以简化，转化成二进制做乘法竖式，发现如果乘数当前位是1，乘法结果就是被乘数本身，当前位是0，乘法结果也是0，不会被加到最终乘积。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4 * 5 = 20</span><br><span class="line">      0000 0100 = 4</span><br><span class="line">      0000 0101 = 5</span><br><span class="line">      -------------</span><br><span class="line">           0100</span><br><span class="line">          0000</span><br><span class="line">         0100</span><br><span class="line">      -------------</span><br><span class="line">      0001 0100 = 20        </span><br></pre></td></tr></table></figure><p>所以只需要不断判断乘数最后一位是否是1，是就把被乘数加到最终结果，不是就不加，被乘数左移1位，乘数右移1位，直到乘数为0。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">var</span> c, d, e <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">c = add(^a, <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c = a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> b &lt; <span class="number">0</span> &#123;</span><br><span class="line">d = add(^b, <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">d = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> d&amp;<span class="number">0x01</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">e = add(e, c)</span><br><span class="line">&#125;</span><br><span class="line">c = c &lt;&lt; <span class="number">1</span></span><br><span class="line">d = d &gt;&gt; <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> a^b &lt; <span class="number">0</span> &#123;</span><br><span class="line">e = add(^e, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p><code>a / b</code>可以看作是被除数不断的减去除数，直到被除数小于除数，被减次数就是商，此时被减数就是余数。商的符号和<code>a^b</code>一致，余数符号和被减数一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(a, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> c, d, e, f <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">c = add(^a, <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c = a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> b &lt; <span class="number">0</span> &#123;</span><br><span class="line">d = add(^b, <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">d = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c &gt;= d &#123;</span><br><span class="line">c = subtract(c, d)</span><br><span class="line">e = add(e, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a^b &lt; <span class="number">0</span> &#123;</span><br><span class="line">e = add(^e, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">f = add(^c, <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">f = c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e, f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="number">-21</span>, <span class="number">-4</span></span><br><span class="line">c, d := divide(a, b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d / %d = %d ... %d\n&quot;</span>, a, b, c, d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// -21 / -4 = 5 ... -1</span></span><br></pre></td></tr></table></figure><p>上面的方法如果被除数很大，除数很小，需要减很多次，可以每次尝试多减几次b，例如<code>a - b*2^n</code>，也就是每次找到最大的2^n。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(a, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> c, d, e, f <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">c = add(^a, <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c = a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> b &lt; <span class="number">0</span> &#123;</span><br><span class="line">d = add(^b, <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">d = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">63</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">    <span class="comment">// 使用c&gt;&gt;i而不是d&lt;&lt;i，是因为d&lt;&lt;i会溢出而c&gt;&gt;i不会</span></span><br><span class="line"><span class="keyword">if</span> c&gt;&gt;i &gt;= d &#123;</span><br><span class="line">c = subtract(c, d&lt;&lt;i)</span><br><span class="line">e = add(e, <span class="number">1</span>&lt;&lt;i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> a^b &lt; <span class="number">0</span> &#123;</span><br><span class="line">e = add(^e, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">f = add(^c, <span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">f = c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e, f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="number">-21</span>, <span class="number">4</span></span><br><span class="line">c, d := divide(a, b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d / %d = %d .... %d\n&quot;</span>, a, b, c, d)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// -21 / 4 = -5 ... -1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;a&amp;amp;b&lt;/code&gt;按位与，目的是把某些位置0，查看变量的最后一位是不是1可以写成&lt;code&gt;a &amp;amp; 0x01 == 1&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 口诀是有0就是0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 &amp;amp; 0 = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 &amp;amp; 1 = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;amp; 0 = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;amp; 1 = 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Computer" scheme="https://fancxxy.github.io/tags/Computer/"/>
    
  </entry>
  
  <entry>
    <title>Go实现HTTPS服务器和客户端</title>
    <link href="https://fancxxy.github.io/2020/11/20/go-https/"/>
    <id>https://fancxxy.github.io/2020/11/20/go-https/</id>
    <published>2020-11-20T08:44:38.000Z</published>
    <updated>2022-07-01T07:50:13.781Z</updated>
    
    <content type="html"><![CDATA[<p>HTTPS全称HTTP over TLS，是利用TLS对HTTP数据加密的通信方式。TLS是一种安全协议，在网络多层模型中介于TCP层和Application层之间，在TCP三次握手完成后进行TLS握手，握手目的是获取证书验证身份，双方协商加密算法，生成对称加密密钥，验证加密是否成功。</p><span id="more"></span><h3 id="Wireshark抓包分析"><a href="#Wireshark抓包分析" class="headerlink" title="Wireshark抓包分析"></a>Wireshark抓包分析</h3><p>具体TLS握手分为以下几个步骤：</p><ol><li>Client Hello</li><li>Server Hello</li><li>Certificate</li><li>Server Key Exchange （可选）</li><li>Server Done</li><li>Client Key Exchange</li><li>Change Cipher Spec</li><li>Encrypted Handshake Message</li><li>New Session Ticker</li><li>Change Cipher Sepc</li><li>Encrypted Handshake Message</li></ol><p>通过抓取浏览器与<a href="blog.fancxxy.me">fancxxy’s blog</a>通信的TLS数据包来展示TLS握手过程。</p><h4 id="ClientHello"><a href="#ClientHello" class="headerlink" title="ClientHello"></a>ClientHello</h4><img src="client-hello.png"><p>ClientHello是TLS握手的第一个包，客户端向服务端请求加密协商，包含自身支持的TLS协议版本，支持的加密套件列表，生成的随机数，用于生成对称加密密钥。</p><h4 id="ServerHello"><a href="#ServerHello" class="headerlink" title="ServerHello"></a>ServerHello</h4><img src="server-hello.png"><p>服务端根据客户端提供的内容确定加密方式，此处是<code>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</code>。</p><p><code>ECDHE_RSA</code>表示非对称加密算法是ECDH，此算法需要提供额外参数以及验证用的公钥，会在握手过程多一个步骤<code>Server key Exchange</code>，额外参数的签名算法是RSA。</p><p><code>AES_128_GCM</code>表示对称加密算法是AES，密钥长度128，分组使用GCM。</p><p><code>SHA256</code>表示计算消息流完整性的哈希算法。</p><p>同时服务端也生成了随机数，用于后续生成对称加密密钥。</p><h4 id="Certificate"><a href="#Certificate" class="headerlink" title="Certificate"></a>Certificate</h4><img src="certificate.png"><p>加密算法协商之后，服务端发送自身数字证书以及签发该证书的证书链给客户端。客户端通过证书链找到根CA证书，根CA证书是内置在浏览器或操作系统中的，从根CA证书开始一级一级验证证书的合法性。</p><p>验证证书的过程，用证书中的公钥对密文解密，再用证书中的签名算法对证书内容签名，比较两者的结果是否相同。由于中间人无法获取CA机构的密钥，所以无法伪造证书做手脚。</p><h4 id="Server-Key-Exchange-Server-Hello-Done"><a href="#Server-Key-Exchange-Server-Hello-Done" class="headerlink" title="Server Key Exchange, Server Hello Done"></a>Server Key Exchange, Server Hello Done</h4><img src="server-hello-done.png"><p><code>Server Key Exchange</code>发送ECDH的参数以及自己的公钥给客户端。</p><p><code>Server Hello Done</code>结束。</p><h4 id="Client-Key-Exchange-Change-Cipher-Spec-Encrypted-Handshake-Message"><a href="#Client-Key-Exchange-Change-Cipher-Spec-Encrypted-Handshake-Message" class="headerlink" title="Client Key Exchange, Change Cipher Spec, Encrypted Handshake Message"></a>Client Key Exchange, Change Cipher Spec, Encrypted Handshake Message</h4><img src="client-finished.png"><p><code>Client Key Exchange</code>发送ECDH的参数以及自己的公钥给服务端。此时服务端和客户端都有了两个随机数、自己的私钥以及对方的公钥，可以各自在本地计算出相同的加密密钥，加密密钥就不用在网络传输了。</p><p><code>Change Cipher Spec</code>通知服务端后续数据使用对称加密算法加密。</p><p><code>Encrypted Handshake Message</code>客户端结束握手，发送整个流程中第一条密文数据给服务端解密。</p><h4 id="New-Session-Ticket-Change-Cipher-Spec-Encrypted-Handshake-Message"><a href="#New-Session-Ticket-Change-Cipher-Spec-Encrypted-Handshake-Message" class="headerlink" title="New Session Ticket, Change Cipher Spec, Encrypted Handshake Message"></a>New Session Ticket, Change Cipher Spec, Encrypted Handshake Message</h4><img src="server-finished.png"><p><code>New Session Ticket</code>服务端建立类似Web应用的session机制，适当时机恢复会话用。</p><p><code>Change Cipher Spec</code>通知客户端后续数据使用对称加密算法加密。</p><p><code>Encrypted Handshake Message</code>服务端结束握手，发送密文数据给客户端解密，解密通过进行数据传输。</p><h3 id="openssl生成证书"><a href="#openssl生成证书" class="headerlink" title="openssl生成证书"></a>openssl生成证书</h3><p>自制CA证书。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成CA证书ca.key</span></span><br><span class="line">$ openssl genrsa -out ca.key 2048</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成根证书签发申请文件ca.csr</span></span><br><span class="line">$ openssl req -new -key ca.key -subj <span class="string">&quot;/CN=fancxxy&quot;</span> -out ca.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自签发根证书ca.crt</span></span><br><span class="line">$ openssl x509 -req -<span class="keyword">in</span> ca.csr -signkey ca.key -out ca.crt</span><br></pre></td></tr></table></figure><p>生成服务端私钥并签发服务端证书。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成服务端私钥server.key</span></span><br><span class="line">$ openssl genrsa -out server.key 2048</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成服务端公钥server.pem</span></span><br><span class="line"><span class="comment"># $ openssl rsa -in server.key -pubout -out server.pem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端申请文件server.csr，/CN设置为localhost方便测试</span></span><br><span class="line">$ openssl req -new -key server.key -subj <span class="string">&quot;/CN=localhost&quot;</span> -out server.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向CA机构申请服务端证书server.crt</span></span><br><span class="line">$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -<span class="keyword">in</span> server.csr -out server.crt</span><br></pre></td></tr></table></figure><p>生成客户端私钥并签发客户端证书。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成客户端私钥client.key</span></span><br><span class="line">$ openssl genrsa -out client.key 2048</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端申请文件client.csr</span></span><br><span class="line">$ openssl req -new -key client.key -subj <span class="string">&quot;/CN=localhost&quot;</span> -out client.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端证书client.crt</span></span><br><span class="line">$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -<span class="keyword">in</span> client.csr -out client.crt</span><br></pre></td></tr></table></figure><p>目录下文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ tree certs</span><br><span class="line">certs</span><br><span class="line">├── ca.crt</span><br><span class="line">├── ca.csr</span><br><span class="line">├── ca.key</span><br><span class="line">├── ca.srl</span><br><span class="line">├── client.crt</span><br><span class="line">├── client.csr</span><br><span class="line">├── client.key</span><br><span class="line">├── server.crt</span><br><span class="line">├── server.csr</span><br><span class="line">└── server.key</span><br><span class="line"></span><br><span class="line">0 directories, 10 files</span><br></pre></td></tr></table></figure><h3 id="Go实现HTTPS认证"><a href="#Go实现HTTPS认证" class="headerlink" title="Go实现HTTPS认证"></a>Go实现HTTPS认证</h3><h4 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h4><p>服务端使用<code>Server.ListenAndServeTLS</code>方法导入证书和私钥。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;pong&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server := &amp;http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:443&quot;</span>,</span><br><span class="line">Handler: mux,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.ListenAndServeTLS(<span class="string">&quot;../certs/server.crt&quot;</span>, <span class="string">&quot;../certs/server.key&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端使用<code>x509.NewCertPool</code>创建证书容器，<code>CertPool.AppendCertsFromPEM</code>导入自建CA根证书。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;golang.org/x/net/http2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">caCert, err := ioutil.ReadFile(<span class="string">&quot;../certs/ca.crt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">caPool := x509.NewCertPool()</span><br><span class="line">caPool.AppendCertsFromPEM(caCert)</span><br><span class="line"></span><br><span class="line">tlsConfig := &amp;tls.Config&#123;</span><br><span class="line">RootCAs: caPool,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client := http.Client&#123;</span><br><span class="line">Transport: &amp;http2.Transport&#123;</span><br><span class="line">TLSClientConfig: tlsConfig,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, err := client.Get(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">bs, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务端和客户端程序，客户端执行时需要设置环境变量<code> GODEBUG=x509ignoreCN=0</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ GODEBUG=x509ignoreCN=0 go run main.go https://localhost:443/ping</span><br><span class="line">pong</span><br></pre></td></tr></table></figure><h4 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h4><p>服务端有时候也需要验证客户端身份，客户端身份是CA机构签发，所以服务端需要读取根CA证书。读取方法和单项认证的客户端一样。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">caCert, err := ioutil.ReadFile(<span class="string">&quot;../certs/ca.crt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">caPool := x509.NewCertPool()</span><br><span class="line">caPool.AppendCertsFromPEM(caCert)</span><br><span class="line"></span><br><span class="line">tlsConfig := &amp;tls.Config&#123;</span><br><span class="line">ClientCAs:  caPool,</span><br><span class="line">ClientAuth: tls.RequireAndVerifyClientCert,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;pong&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server := &amp;http.Server&#123;</span><br><span class="line">Addr:      <span class="string">&quot;:443&quot;</span>,</span><br><span class="line">Handler:   mux,</span><br><span class="line">TLSConfig: tlsConfig,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.ListenAndServeTLS(<span class="string">&quot;../certs/server.crt&quot;</span>, <span class="string">&quot;../certs/server.key&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用单项认证的客户端代码直接执行可以看到客户端返回错误<code>tls: bad certificate</code>，服务端返回错误<code>tls: client didn&#39;t provide a certificate</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ GODEBUG=x509ignoreCN=0 go run main.go https://localhost:443/ping</span><br><span class="line">panic: Get <span class="string">&quot;https://localhost:443/ping&quot;</span>: remote error: tls: bad certificate</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.main()</span><br><span class="line">/Users/fancxxy/Works/test/http/client/main.go:33 +0x427</span><br><span class="line"><span class="built_in">exit</span> status 2</span><br><span class="line"></span><br><span class="line">$ go run main.go</span><br><span class="line">2020/11/20 16:25:22 http: TLS handshake error from [::1]:49995: tls: client didn<span class="string">&#x27;t provide a certificate</span></span><br></pre></td></tr></table></figure><p>客户端提供认证证书，需要<code>tls.LoadX509KeyPair</code>方法加载自己的私钥和公钥并设置到<code>tls.Config</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">caCert, err := ioutil.ReadFile(<span class="string">&quot;../certs/ca.crt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">caPool := x509.NewCertPool()</span><br><span class="line">caPool.AppendCertsFromPEM(caCert)</span><br><span class="line"></span><br><span class="line">cliCert, err := tls.LoadX509KeyPair(<span class="string">&quot;../certs/client.crt&quot;</span>, <span class="string">&quot;../certs/client.key&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tlsConfig := &amp;tls.Config&#123;</span><br><span class="line">RootCAs:      caPool,</span><br><span class="line">Certificates: []tls.Certificate&#123;cliCert&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client := http.Client&#123;</span><br><span class="line">Transport: &amp;http.Transport&#123;</span><br><span class="line">TLSClientConfig: tlsConfig,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, err := client.Get(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">bs, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新直接客户端代码能正确返回结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ GODEBUG=x509ignoreCN=0 go run main.go https://localhost:443/ping</span><br><span class="line">pong</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;HTTPS全称HTTP over TLS，是利用TLS对HTTP数据加密的通信方式。TLS是一种安全协议，在网络多层模型中介于TCP层和Application层之间，在TCP三次握手完成后进行TLS握手，握手目的是获取证书验证身份，双方协商加密算法，生成对称加密密钥，验证加密是否成功。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Protocol" scheme="https://fancxxy.github.io/tags/Protocol/"/>
    
    <category term="Go" scheme="https://fancxxy.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>ICMP监控</title>
    <link href="https://fancxxy.github.io/2020/09/09/ICMP/"/>
    <id>https://fancxxy.github.io/2020/09/09/ICMP/</id>
    <published>2020-09-09T06:37:37.000Z</published>
    <updated>2022-07-01T07:50:13.769Z</updated>
    
    <content type="html"><![CDATA[<p><code>ping</code>命令可以用来探测对端机器的网络连通状况以及网络延迟时间。当只有单台机器时可以用<code>ping</code>命令来探测，但如果有几千台机器就不合适了，所以我们利用<code>ping</code>命令的原理写了一个支持同时探测上千台机器网络连通性的程序。</p><span id="more"></span><h3 id="ICMP-Protocol"><a href="#ICMP-Protocol" class="headerlink" title="ICMP Protocol"></a>ICMP Protocol</h3><p>首先得了解ICMP协议，ICMP中文名是互联网控制报文协议，全称Internet Control Message Protocol，主要作用就是传输网络诊断信息。</p><p>ICMP报文分两类，分别是差错报文和询问报文，监控网络连通性用的是询问报文的Echo Request和Echo Reply，报文结构如下，传输时被封装在IP数据报中，但通常还是认为ICMP是网络层协议，目的机器收到Echo Request后会回应一个Echo Reply，内容和请求一模一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|     Type      |     Code      |          Checksum             |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|           Identifier          |        Sequence Number        |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|     Data ...</span><br><span class="line">+-+-+-+-+-</span><br></pre></td></tr></table></figure><ul><li><p>Type: 报文的类型，占用一个字节，ICMPv4的Echo Request和Echo Reply对应的Type分别是8和0，ICMPv6的对应值是128和129。</p></li><li><p>Code: 占用一个字节，请求和应答的Code都是0。</p></li><li><p>Checksum: 占用两个字节，校验和用来校验数据包的完整性。</p></li><li><p>Identifier: 占用两个字节，在ping命令中用的本进程的PID来赋值的，用来区分是哪个ping进程发出的请求。因为如果有多个ping进程同时运行，会从底层原始套接字读到对方进程的请求回包，根据这个字段判断如果不是自己发出的就丢弃。</p></li><li><p>Sequence Number: 占用两个字节，给每个发出的请求打上序列号，由于响应内容和请求内容一样所以也会包含相同序列号，用来关联请求和响应。</p></li></ul><h3 id="ICMP-package"><a href="#ICMP-package" class="headerlink" title="ICMP package"></a>ICMP package</h3><p><code>golang.org/x/net/icmp</code>包已经实现了ICMPv4和ICMPv6的基础功能，可以使用Echo相关的代码。</p><p><code>Message</code>是ICMP消息的结构体，其中<code>MessageBody</code>是一个接口类型，<code>Echo</code>实现了该接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">    Type     Type        <span class="comment">// type, either ipv4.ICMPType or ipv6.ICMPType</span></span><br><span class="line">    Code     <span class="type">int</span>         <span class="comment">// code</span></span><br><span class="line">    Checksum <span class="type">int</span>         <span class="comment">// checksum</span></span><br><span class="line">    Body     MessageBody <span class="comment">// body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Echo <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID   <span class="type">int</span>    <span class="comment">// identifier</span></span><br><span class="line">    Seq  <span class="type">int</span>    <span class="comment">// sequence number</span></span><br><span class="line">    Data []<span class="type">byte</span> <span class="comment">// data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ListenPacket</code>方法返回一个监听原始套接字的连接，通过这个连接可以发送和读取ICMP数据包（监听原始套接字需要root权限）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenPacket</span><span class="params">(network, address <span class="type">string</span>)</span></span> (*PacketConn, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>如果想要同时监控ICMPv4和ICMPv6，就需要初始化两个连接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ListenPacket(<span class="string">&quot;ip4:icmp&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>)</span><br><span class="line">ListenPacket(<span class="string">&quot;ip6:ipv6-icmp&quot;</span>, <span class="string">&quot;::&quot;</span>)</span><br></pre></td></tr></table></figure><p>利用上面提到的连接和结构体实现一个最简单的发送Echo Request和接收Echo Reply的程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;golang.org/x/net/icmp&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/net/ipv4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(conn *icmp.PacketConn, ip <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">dest, err := net.ResolveIPAddr(<span class="string">&quot;ip&quot;</span>, ip)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msg := &amp;icmp.Message&#123;</span><br><span class="line">Code: <span class="number">0</span>,</span><br><span class="line">Type: ipv4.ICMPTypeEcho,</span><br><span class="line">Body: &amp;icmp.Echo&#123;</span><br><span class="line">ID:   os.Getpid(),</span><br><span class="line">Seq:  <span class="number">2</span>,</span><br><span class="line">Data: []<span class="type">byte</span>(<span class="string">&quot;hello icmp&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wb, err := msg.Marshal(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = conn.WriteTo(wb, dest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">receive</span><span class="params">(conn *icmp.PacketConn)</span></span> (*icmp.Message, *icmp.Echo, <span class="type">error</span>) &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">64</span>)</span><br><span class="line">n, _, err := conn.ReadFrom(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msg, err := icmp.ParseMessage(<span class="number">1</span>, buf[:n])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">body, ok := msg.Body.(*icmp.Echo)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errors.New(<span class="string">&quot;cannot convert Message.Body to *icmp.Echo&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> msg, body, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := icmp.ListenPacket(<span class="string">&quot;ip4:icmp&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := send(conn, <span class="string">&quot;www.baidu.com&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> msg, echo, err := receive(conn); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Type: %v, Code: %v, Checksum: %x\nIdentifier: %v, Sequence Number: %v\nData: %s\n&quot;</span>,</span><br><span class="line">msg.Type, msg.Code, msg.Checksum, echo.ID, echo.Seq, echo.Data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在root权限下运行的结果如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type: echo reply, Code: 0, Checksum: d779</span><br><span class="line">Identifier: 3518, Sequence Number: 2</span><br><span class="line">Data: hello icmp</span><br></pre></td></tr></table></figure><h3 id="Checksum"><a href="#Checksum" class="headerlink" title="Checksum"></a>Checksum</h3><p>Checksum的计算在<code>msg.Marshal</code>方法中调用。对每个16bit进行二进制反码求和，把最终结果的低16bit和高16bit继续求和，直到高16bit为0，返回结果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Message)</span></span> Marshal(psh []<span class="type">byte</span>) ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    b := []<span class="type">byte</span>&#123;mtype, <span class="type">byte</span>(m.Code), <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    s := checksum(b)</span><br><span class="line">    <span class="comment">// Place checksum back in header; using ^= avoids the</span></span><br><span class="line">    <span class="comment">// assumption the checksum bytes are zero.</span></span><br><span class="line">    b[<span class="built_in">len</span>(psh)+<span class="number">2</span>] ^= <span class="type">byte</span>(s)</span><br><span class="line">    b[<span class="built_in">len</span>(psh)+<span class="number">3</span>] ^= <span class="type">byte</span>(s &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> b[<span class="built_in">len</span>(psh):], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checksum</span><span class="params">(b []<span class="type">byte</span>)</span></span> <span class="type">uint16</span> &#123;</span><br><span class="line">csumcv := <span class="built_in">len</span>(b) - <span class="number">1</span> <span class="comment">// checksum coverage</span></span><br><span class="line">s := <span class="type">uint32</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; csumcv; i += <span class="number">2</span> &#123;</span><br><span class="line">s += <span class="type">uint32</span>(b[i+<span class="number">1</span>])&lt;&lt;<span class="number">8</span> | <span class="type">uint32</span>(b[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> csumcv&amp;<span class="number">1</span> == <span class="number">0</span> &#123;</span><br><span class="line">s += <span class="type">uint32</span>(b[csumcv])</span><br><span class="line">&#125;</span><br><span class="line">s = s&gt;&gt;<span class="number">16</span> + s&amp;<span class="number">0xffff</span></span><br><span class="line">s = s + s&gt;&gt;<span class="number">16</span></span><br><span class="line"><span class="keyword">return</span> ^<span class="type">uint16</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的代码是模拟校验checksum的过程，x是待发送的ICMP数据包，先把checksum字段置0，也就是x[2]和x[3]置0。调用<code>checksum</code>方法计算结果，结果是16位整数，低位字节赋值给x[2]，高位字节赋值给x[3]。接收方收到数据后对完整的ICMP数据包调用<code>checksum</code>方法，最终计算结果是0，表示校验通过。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="type">byte</span>&#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x08</span>, <span class="number">0x09</span>&#125;</span><br><span class="line">s := checksum(x)</span><br><span class="line">x[<span class="number">2</span>] ^= <span class="type">byte</span>(s)</span><br><span class="line">x[<span class="number">3</span>] ^= <span class="type">byte</span>(s &gt;&gt; <span class="number">8</span>)</span><br><span class="line">fmt.Println(checksum(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Multiple-ICMP"><a href="#Multiple-ICMP" class="headerlink" title="Multiple ICMP"></a>Multiple ICMP</h3><p>支持同时对多个机器发送和接收ICMP数据包，发送和接收的方法肯定要分离，连接绑定原始套接字后，发送协程把Echo Request写入连接，接收协程从连接中读取并解析Echo Reply，接收的时间戳和发送的时间戳之差就是RTT值。</p><p>问题是接收之后如何通知发送协程，<code>Ping</code>是发送Echo Request的方法，每个Echo Request都有唯一序列号Sequence，可以给每个请求分配一个通道channel，和序列号关联。<code>receive</code>是接收Echo Reply的方法，根据解析出来的Echo Reply中的序列号找到通道，通知正在等待的发送协程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Ping)</span></span> Ping(ip <span class="type">string</span>, timeout time.Duration) (time.Duration, <span class="type">error</span>) &#123;</span><br><span class="line">ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(timeout))</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">dest, err := net.ResolveIPAddr(<span class="string">&quot;ip&quot;</span>, ip)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">seq = <span class="type">int</span>(atomic.AddUint32(&amp;sequence, <span class="number">1</span>))</span><br><span class="line">msg = icmp.Message&#123;</span><br><span class="line">Code: <span class="number">0</span>,</span><br><span class="line">Body: &amp;icmp.Echo&#123;</span><br><span class="line">ID:   p.id,</span><br><span class="line">Seq:  seq,</span><br><span class="line">Data: p.payload,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">conn *icmp.PacketConn</span><br><span class="line">lock *sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> dest.IP.To4() != <span class="literal">nil</span> &#123;</span><br><span class="line">msg.Type = ipv4.ICMPTypeEcho</span><br><span class="line">conn = p.conn4</span><br><span class="line">lock = &amp;p.lock4</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">msg.Type = ipv6.ICMPTypeEchoRequest</span><br><span class="line">conn = p.conn6</span><br><span class="line">lock = &amp;p.lock6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bs, err := msg.Marshal(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req := newRequest()</span><br><span class="line">p.addReq(seq, req)</span><br><span class="line"></span><br><span class="line">lock.Lock()</span><br><span class="line">_, err = conn.WriteTo(bs, dest)</span><br><span class="line">lock.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">req.<span class="built_in">close</span>()</span><br><span class="line">p.delReq(seq)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-req.wait:</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">p.delReq(seq)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;wait echo reply timeout&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> req.rtt()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Ping)</span></span> receive(proto <span class="type">int</span>, conn *icmp.PacketConn) &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1500</span>)</span><br><span class="line"><span class="keyword">defer</span> p.wg.Done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// conn.IPv4PacketConn().ReadFrom(buf)</span></span><br><span class="line"><span class="comment">// conn.IPv6PacketConn().ReadFrom(buf)</span></span><br><span class="line">n, _, err := conn.ReadFrom(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> netErr, ok := err.(net.Error); !ok || !netErr.Temporary() &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msg, err := icmp.ParseMessage(proto, buf[:n])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> msg.Type &#123;</span><br><span class="line"><span class="keyword">case</span> ipv4.ICMPTypeEchoReply, ipv6.ICMPTypeEchoReply:</span><br><span class="line">echo, ok := msg.Body.(*icmp.Echo)</span><br><span class="line"><span class="keyword">if</span> !ok || echo == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> echo.ID != p.id &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req := p.delReq(echo.Seq)</span><br><span class="line"><span class="keyword">if</span> req != <span class="literal">nil</span> &#123;</span><br><span class="line">req.<span class="built_in">close</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码可以在<a href="https://github.com/fancxxy/ping">GitHub</a>查看。</p><p>下面的例子演示同时ping多个地址的结果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/fancxxy/ping&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rtt</span><span class="params">(p *ping.Ping, dest <span class="type">string</span>, timeout time.Duration, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">rtt, err := p.Ping(dest, timeout)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ping %s, error %s\n&quot;</span>, dest, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ping %s, rtt %.3f ms\n&quot;</span>, dest, <span class="type">float64</span>(rtt/time.Microsecond)/<span class="number">1000.0</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p, err := ping.New(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">dests = []<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;www.baidu.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;www.weibo.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;www.qq.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;www.bilibili.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;www.zhihu.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;www.sina.com.cn&quot;</span>,</span><br><span class="line"><span class="string">&quot;www.google.com&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">timeout = time.Second * <span class="number">2</span></span><br><span class="line">wg      sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="built_in">len</span>(dests))</span><br><span class="line"><span class="keyword">for</span> _, dest := <span class="keyword">range</span> dests &#123;</span><br><span class="line"><span class="keyword">go</span> rtt(p, dest, timeout, &amp;wg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com, rtt 25.514 ms</span><br><span class="line">ping www.sina.com.cn, rtt 26.012 ms</span><br><span class="line">ping www.weibo.com, rtt 53.461 ms</span><br><span class="line">ping www.zhihu.com, rtt 27.881 ms</span><br><span class="line">ping www.bilibili.com, rtt 29.017 ms</span><br><span class="line">ping www.qq.com, rtt 38.193 ms</span><br><span class="line">ping www.google.com, error wait echo reply timeout</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;ping&lt;/code&gt;命令可以用来探测对端机器的网络连通状况以及网络延迟时间。当只有单台机器时可以用&lt;code&gt;ping&lt;/code&gt;命令来探测，但如果有几千台机器就不合适了，所以我们利用&lt;code&gt;ping&lt;/code&gt;命令的原理写了一个支持同时探测上千台机器网络连通性的程序。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Protocol" scheme="https://fancxxy.github.io/tags/Protocol/"/>
    
    <category term="Go" scheme="https://fancxxy.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>缓存淘汰算法LRU和LFU</title>
    <link href="https://fancxxy.github.io/2020/07/20/cache-replacement-policies/"/>
    <id>https://fancxxy.github.io/2020/07/20/cache-replacement-policies/</id>
    <published>2020-07-20T02:40:20.000Z</published>
    <updated>2022-07-01T07:50:13.770Z</updated>
    
    <content type="html"><![CDATA[<p>缓存可以用来提高数据的查询速度，但缓存容量有限，当缓存达到容量上限时，需要删除部分数据来添加新的数据，常用的删除数据的策略有LRU和LFU。</p><span id="more"></span><h3 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h3><p>LRU（Least Recently Used）最近最少使用算法，当缓存达到容量上限删除最久没有被访问过的数据。</p><p>使用双向链表来存储数据，新加入的数据放到链表头，当数据被访问时把存储数据的结点移动到链表头，这样链表中结点的顺序就代表数据被访问的顺序。当链表结点数量达到设定的阈值时，丢弃链表尾结点，因为它是最久没有被访问的。</p><p>链表查询的时间复杂度是O(n)，可以用哈希表存储链表结点的地址，查询达到O(1)的复杂度。</p><div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\&quot;Electron\&quot; modified=\&quot;2020-11-11T06:08:19.931Z\&quot; agent=\&quot;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/13.7.9 Chrome/85.0.4183.121 Electron/10.1.3 Safari/537.36\&quot; etag=\&quot;h4ZgnCrS8BMZ1Ck2YNPC\&quot; version=\&quot;13.7.9\&quot; type=\&quot;device\&quot;&gt;&lt;diagram id=\&quot;JlRB1wD8-z-Si42WC8DS\&quot; name=\&quot;Page-1\&quot;&gt;7Vtdb5swFP01PK6K+Qo8hpS0qjppWjete6TgghcHR8Rpkv362cFAwNCwJmFk4iWyL8bgc8+5vlyIok0X27vEW0afSQCxoo6CraLdKqpq2Rb75YZdajCtUWoIExSkJlAYntBvKIzZsDUK4Ko0kBKCKVqWjT6JY+jTks1LErIpD3sluHzVpRdCyfDke1i2/kABjcSy1HFhv4cojLIrA9NOjyy8bLBYySryArI5MGmuok0TQmjaWmynEHPsMlzS82YNR/MbS2BM25zwbM3ccO0+3n02HpYOitZO8PBJU9Np3jy8FitWXEOxZoo15Q17pNhAcW3F1hTHVVxLmQBlIny6orsMJgq37CaciC4wMwDWXNGEzOGUYJIwS0xiNtJ5RRhXTB5GYcy6PlsGZHbnDSYUMQdMxIEFCgJ+GWcTIQqflp7Pr7lhbGO2hKzjAPIVjvg155D6kei8kpjOvAXCnHn3EL9BPq04IIgGmBccGUiBLb8TuD0wCWDvIFlAmuzYEHHUFj4WJAe66G8KyuS26IAuGTc8wdIwn7lwJGsIX/6FX4Hk1jncjSS3leGrA/jAo42AlmA/A5pVOA0ZTaMGTONSYMoaYWCCKwFT0/sFpl4Hpn4lYOo9Y6ZRB6Z2LWD2jJlmHZjqlYCp9YyZVkPMNDHPE14S1gp5iw04MZK22/TPsS2NKrv8WMbYrMHYvNgmL+dhMGDZq+iShEYkJLGH3cJayZiKMY+ELAWivyClO5EheWtKynjDLaLP4nTe/snbN2NDdG+3B8dud1knZgt+zmbgncPTeL84b9/bHXNoye0wDiY82WfdF0z8+bcIxal5hnB2440UWJF14sN3gBYpPfWSENLjpOdO+Eieo1+KKHbDNlEjxhM3j87EqPVOjONBjJ2IMasMHFWj3VM1ZguQUuAaOZ6YGHcmRx30TY5yIOtQjqAkR7WlHEdlOapXIUfrytWYl+eGuH3huA1aMiULJb2jCmiqqtUE7hNrbZ0FbkPtW+C2Bz12o0e1rR5BX/VYW5hVa/V4Yh2nMz2afdOjKpfFZIHWM/UAv8BbRXus3y2K5Sq8MQ50CNqJUJyUy/CIBqtSE5p6txx3XFMdS+qE6p641heC2CKLPF4rXyh/zM6mSCEQZxXUkieyyhNJ95JiJE2052gOwAmxQX5yGvL/f1kb621Wl73KHwJcC2+3zRnOVAkd4lujI+QXLANrm8Ay28Yota+0rWaF1Q9HroW2wBi25X5VyXv7dKfKb62GCNcEltHS22eqwg77cqOczCHA9aycfKZN/ewBLqP8EOBauFtv6+0zPWYOEa6RtvJbkP2X4ppiWbzhWPtvx4cvxev5VnlRrsp8s2r4pl0sCGmSNx+/fv9vvGaex2uaqd4YZb+ZsuPAyJA994FP/Fm3+FtIKtvivzWa+wc=&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}"></div><script type="text/javascript" src="https://app.diagrams.net/js/viewer-static.min.js"></script><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;container/list&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> lruItem <span class="keyword">struct</span> &#123;</span><br><span class="line">key   <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">value <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LRU 缓存</span></span><br><span class="line"><span class="keyword">type</span> LRU <span class="keyword">struct</span> &#123;</span><br><span class="line">capacity <span class="type">int</span></span><br><span class="line">hash     <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*list.Element</span><br><span class="line">list     *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewLRU 创建LRU缓存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLRU</span><span class="params">(capacity <span class="type">int</span>)</span></span> *LRU &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;LRU&#123;</span><br><span class="line">capacity: capacity,</span><br><span class="line">hash:     <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*list.Element),</span><br><span class="line">list:     list.New(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 读取数据并移动结点到链表头</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lru *LRU)</span></span> Get(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">if</span> lru.capacity &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">node, ok := lru.hash[key]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lru.list.MoveToFront(node)</span><br><span class="line"><span class="keyword">return</span> node.Value.(*lruItem).value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Put 写入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lru *LRU)</span></span> Put(key, value <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line"><span class="keyword">if</span> lru.capacity &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node, ok := lru.hash[key]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">if</span> lru.list.Len() &gt;= lru.capacity &#123;</span><br><span class="line">node = lru.list.Back()</span><br><span class="line"><span class="built_in">delete</span>(lru.hash, node.Value.(*lruItem).key)</span><br><span class="line">lru.list.Remove(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lru.hash[key] = lru.list.PushFront(&amp;lruItem&#123;key: key, value: value&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.Value = &amp;lruItem&#123;key: key, value: value&#125;</span><br><span class="line">lru.list.MoveToFront(node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h3><p>LFU（Least Frequently Used）最不经常使用，当缓存达到容量上限删除访问次数最少的数据，如果有多条数据访问次数最少，按照访问时间顺序删除最久未被访问的那条。</p><p>使用两张哈希表，其中一张存储缓存的key、value以及访问频率freq，另一张哈希表映射访问频率freq和所有相同访问频率的缓存数据组成的双向链表。</p><p>第一张哈希表通过key可以定位到某个双向链表中的某个结点，再通过结点内部的freq由第二张哈希表定位到保存这个结点的双向链表。Get的操作就是在这个链表中删除该结点，再定位到freq+1的链表上，把缓存数据插入链表头，同时更新最小访问频率。最小访问频率的作用是当缓存容量达到上限时，快速定位并删除最不经常使用的元素。Put的操作如果key已经存在时跟Get类似，区别是要给缓存重新赋值，如果key不存在则在freq&#x3D;1的链表头插入一条新缓存数据，修改最小访问频率为1。</p><div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\&quot;Electron\&quot; modified=\&quot;2020-11-11T06:07:34.693Z\&quot; agent=\&quot;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/13.7.9 Chrome/85.0.4183.121 Electron/10.1.3 Safari/537.36\&quot; etag=\&quot;4LmIaNHm-bQZKHp_SbIl\&quot; version=\&quot;13.7.9\&quot; type=\&quot;device\&quot;&gt;&lt;diagram id=\&quot;JlRB1wD8-z-Si42WC8DS\&quot; name=\&quot;Page-1\&quot;&gt;7Vxdb6M4FP01PO4IMJ+PTZt0NOpII3VXO/PIgBvYEpwlTpvsr18T7BCwSUgTiKH0ocIXMHDOuf64vo4C7hebx9Rbht9RAGNFV4ONAh4UXXdch/zPDNvcYDlqbpinUZCbtMLwHP0HqZFdto4CuCpdiBGKcbQsG32UJNDHJZuXpui9fNkListPXXpzyBmefS/mrX9HAQ7pZ+l2Yf8Ko3nInqxZbn5m4bGL6ZesQi9A7wcmMFXAfYoQzo8Wm3sYZ9gxXPL7ZjVn9y+WwgQ3ueGnM5vO19Onx+/mt+UkCteT4NsfgNLz5sVr+sUvKfyXHNH6V3jLoEjROglgVpuqgMl7GGH4vPT87Ow74Z7YQryId7eCyeoVYj+k176gBM+8RRRnIvgK4zeII9+jJyjnGgFkwn8TfY03mGK4OTDRb3yEaAFxuiWX0LO6SfGmgtMY/u8FfeyS8IA5ZvOoYOb7mgtMyQGF9RyI3TqI3Z5CbMgGsaHWQWz3FWJVNoi1OohBTyEG0kGs10Fs9BVi6RoKwEH8CrcEXismj578TsnRPDsiFwisPadDM8p0EBfg6LAEdFht0WHqHJIwIMMvWkQpDtEcJV48LayTMtYlMIsbnhBaUrj/gRhvKZLeGqMyGXAT4Z/Z7V9skxZ/0dqy44fNYWHLCgn5+sO7svIvVmNWKO7blbbnsg2T4C4bvZLy7xj5r3+GUZKbZ1HM3r1WEiu0Tn14zA+ohLGXziFu4DAZLU0kVnV4tTVPNkSebAo9WWAdmCeDW3uyYYroUIV0CKw9H0rscZWlYTUsER26kA6BteeDZ+DIRoctokMT0iGw9nxGbqqS0WHySN5u2KEfDjvYqZPDDr007CgGGpIPO0DTYYch67CDj5cRT7aEniyw9jzwY+myebIlkSd/qgmE29STbVk9mQ/LEk8GQk8WWAfWJ998AmGaoyffxJOZw532ZFdST2YPKnuyLfRkgXVgnmzc3JP5yY4yNRUXKI6THUwcxblXpo5ypyl3Doc6+WxcgRan6BXeoxilxJKgJHP9F6L9ismLoznxjAefgAnTjG8CIsE9vqMnFlEQ7NoNEZdH2pJOIzt2jdsc0GkL6NRbo5Mf8WYsOrMdi4RXVXE1ZepmBE+mI6/NWkNdQKumdcmrxbeafA8s7noOOGzei+071w/Nd8+a7gbeKtwxzjXMRaepXtRpsrSJzoa/FyyY0Wf9QBH5ymKBGdQIklWRY0DvKrTGV1QJtmnVd8kx4iraiXYPwAU65hemP6DjkmSkFHUrOmar+qd1bI46blfHJr/4MQYlOwll2E19QNYJkKWPTeDH6deb0n+lpfCxCaxtAvnl+LEJlCqaywQhXxPIJ3aNTWBj+huHAK2xCWx5NsOnNXWn4w41eVpqjqxSs83yk+y+So1P2VpEyawuGk5qjJaruijbxZHwsmT5IGA5WKjoYDZTyR+tSWSv1d4ZQbsqRYL8ZVEwtrX8ZYvP6+q+m2vcyR3SSJh5cXzo+0e5bKV7swYfuzCrFYGOmxJhVozKSbODFbWK5ma7v+u0BppbRtm0LxfGZa2BMIXhJguZLcKuG5LBzp7PJdcOC3bZ1G7zgf48YWdQsAPp1M4HF/MtU8OCXTq1C3eq8UlS/YbdkE7twm1FfJZpz2GXTu3C7UM32X/SIuymdGq/4XSyMm1XVToFrItCncqnFEdhjydvtjPdbJwb0pd5KbhWiAtUs5lanpfaglTEC/XNxS72wr1c+R9QcOEtpYht4TpdriNYTZeRepMV1V/lC7I2h6r88/qJVpTPZDKcFbT+Kp8Pig1W+RK0+XbjBb0rZU+Nyq9DmD3+Eyhfk0H5elPl9yVxrL/Kv34O+Kj8I8rvehv/qPxa5eu9Un4xZrcAKI3av6inpLwr/YBpRDDLtoG1qO/Gv44lbZLSYPR9lbxOWRvzS6auJZ+9mvLNhsq/ViLwqPxa5fMrUU+zvzjx93VbrXXEp2r1e8Z6buWXaiyLF1y3+22dz7stvkWe9w0JW1IzeZ7d69BMisWPtedeXvziPZj+Dw==&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}"></div><script type="text/javascript" src="https://app.diagrams.net/js/viewer-static.min.js"></script><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;container/list&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> lfuItem <span class="keyword">struct</span> &#123;</span><br><span class="line">key   <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">value <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">freq  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LFU 缓存</span></span><br><span class="line"><span class="keyword">type</span> LFU <span class="keyword">struct</span> &#123;</span><br><span class="line">capacity <span class="type">int</span></span><br><span class="line">keyMap   <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*list.Element</span><br><span class="line">freqMap  <span class="keyword">map</span>[<span class="type">int</span>]*list.List</span><br><span class="line">minFreq  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewLFU 创建LFU缓存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLFU</span><span class="params">(capacity <span class="type">int</span>)</span></span> *LFU &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;LFU&#123;</span><br><span class="line">capacity: capacity,</span><br><span class="line">keyMap:   <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*list.Element&#123;&#125;,</span><br><span class="line">freqMap:  <span class="keyword">map</span>[<span class="type">int</span>]*list.List&#123;&#125;,</span><br><span class="line">minFreq:  <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 读取数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lfu *LFU)</span></span> Get(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">if</span> lfu.capacity &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node, ok := lfu.keyMap[key]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item, ok := node.Value.(*lfuItem)</span><br><span class="line"></span><br><span class="line">lst := lfu.freqMap[item.freq]</span><br><span class="line"></span><br><span class="line">lst.Remove(node)</span><br><span class="line"><span class="keyword">if</span> lst.Len() == <span class="number">0</span> &#123;</span><br><span class="line"><span class="built_in">delete</span>(lfu.freqMap, item.freq)</span><br><span class="line"><span class="keyword">if</span> lfu.minFreq == item.freq &#123;</span><br><span class="line">lfu.minFreq++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item.freq++</span><br><span class="line">lst, ok = lfu.freqMap[item.freq]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">lst = list.New()</span><br><span class="line">&#125;</span><br><span class="line">lfu.keyMap[key] = lst.PushFront(item)</span><br><span class="line">lfu.freqMap[item.freq] = lst</span><br><span class="line"><span class="keyword">return</span> item.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Put 写入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lfu *LFU)</span></span> Put(key, value <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line"><span class="keyword">if</span> lfu.capacity &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node, ok := lfu.keyMap[key]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lfu.keyMap) &gt;= lfu.capacity &#123;</span><br><span class="line">lst := lfu.freqMap[lfu.minFreq]</span><br><span class="line">key := lst.Back().Value.(*lfuItem).key</span><br><span class="line">lst.Remove(lst.Back())</span><br><span class="line"><span class="keyword">if</span> lst.Len() == <span class="number">0</span> &#123;</span><br><span class="line"><span class="built_in">delete</span>(lfu.freqMap, lfu.minFreq)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">delete</span>(lfu.keyMap, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item := &amp;lfuItem&#123;key: key, value: value, freq: <span class="number">1</span>&#125;</span><br><span class="line">lst, ok := lfu.freqMap[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">lst = list.New()</span><br><span class="line">&#125;</span><br><span class="line">lfu.keyMap[key] = lst.PushFront(item)</span><br><span class="line">lfu.freqMap[<span class="number">1</span>] = lst</span><br><span class="line">lfu.minFreq = <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item := node.Value.(*lfuItem)</span><br><span class="line">lst := lfu.freqMap[item.freq]</span><br><span class="line"></span><br><span class="line">lst.Remove(node)</span><br><span class="line"><span class="keyword">if</span> lst.Len() == <span class="number">0</span> &#123;</span><br><span class="line"><span class="built_in">delete</span>(lfu.freqMap, item.freq)</span><br><span class="line"><span class="keyword">if</span> lfu.minFreq == item.freq &#123;</span><br><span class="line">lfu.minFreq++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item.freq++</span><br><span class="line">item.value = value</span><br><span class="line">lst, ok = lfu.freqMap[item.freq]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">lst = list.New()</span><br><span class="line">&#125;</span><br><span class="line">lfu.keyMap[key] = lst.PushFront(item)</span><br><span class="line">lfu.freqMap[item.freq] = lst</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;缓存可以用来提高数据的查询速度，但缓存容量有限，当缓存达到容量上限时，需要删除部分数据来添加新的数据，常用的删除数据的策略有LRU和LFU。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="https://fancxxy.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>宝可梦孵蛋概率问题</title>
    <link href="https://fancxxy.github.io/2019/11/23/pokemon-6v-breeding-percentage/"/>
    <id>https://fancxxy.github.io/2019/11/23/pokemon-6v-breeding-percentage/</id>
    <published>2019-11-23T12:48:10.000Z</published>
    <updated>2022-07-01T07:50:13.769Z</updated>
    
    <content type="html"><![CDATA[<p>《宝可梦 剑&#x2F;盾》发售两周了，在打通了非常尬的主线剧情后，开始了宝可梦孵蛋养殖计划。宝可梦孵蛋是指是把两只不同性别不同蛋组的宝可梦放在寄放屋，过一段游戏时间后就能获得一个宝可梦蛋，孵化宝可梦蛋可以获得一只一级的宝可梦。虽然遍地就能抓宝可梦，但通过孵蛋的方式可以获得特定遗传技能、特定特性、各项属性MAX的完美宝可梦。</p><span id="more"></span><p>然而在拿着两只5v属性的多龙梅西亚孵了一整天蛋之后我傻了，生出6v宝可梦的概率也太低了点吧。在某个网站上查了概率分布，它给出的生出6v宝可梦的概率是1.0417%，然而我感觉我已经孵了200个蛋了，所以我打算写个程序验证一下这个数据的正确性。</p><img src="/2019/11/23/pokemon-6v-breeding-percentage/pokemon-breeding-probability.png" class=""><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>6项个体值每项的区间范围是[0, 31]，个体值为31就称为v，6v就是指全部6项个体值都为31。现在有两只5v属性的宝可梦，非v个体值为0且属性错位，带有红线，红线是一个游戏道具，可以让子代宝可梦随机遗传父母双方五项个体值。为了简化问题，我们假设个体值只有0和1两个值，1就是v，0就是非v。根据条件可以知道生出宝可梦只能是3v、4v、5v和6v，程序要能给出4种情况下的概率。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>如果所有个体值都遗传自父母，那么每项值的可能性是2（父或母），总共6项的组合就是2<sup>6</sup>&#x3D;64种情况，可以想象成是两棵完全二叉树，二叉树的每一层可以理解成一项个体值，完全二叉树第六层结点个数是2<sup>6-1</sup>&#x3D;32，因为有两棵结果就刚好是32*2&#x3D;64。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">graph G &#123;</span><br><span class="line">    // nodesep 结点列间距</span><br><span class="line">    // ranksep 结点行间距</span><br><span class="line">    graph[nodesep=0.8,ranksep=0.2]</span><br><span class="line">    node [shape=circle,fixedsize=true]</span><br><span class="line"></span><br><span class="line">    fhp [label=&quot;HP&quot;,color=blue]</span><br><span class="line">    fattack [label=&quot;攻击&quot;,color=blue]</span><br><span class="line">    fdefense [label=&quot;防御&quot;,color=blue]</span><br><span class="line">    fsattack [label=&quot;特攻&quot;,color=blue]</span><br><span class="line">    fsdefense [label=&quot;特防&quot;,color=blue]</span><br><span class="line">    fspeed [label=&quot;速度&quot;,color=blue]</span><br><span class="line"></span><br><span class="line">    mhp [label=&quot;HP&quot;,color=red]</span><br><span class="line">    mattack [label=&quot;攻击&quot;,color=red]</span><br><span class="line">    mdefense [label=&quot;防御&quot;,color=red]</span><br><span class="line">    msattack [label=&quot;特攻&quot;,color=red]</span><br><span class="line">    msdefense [label=&quot;特防&quot;,color=red]</span><br><span class="line">    mspeed [label=&quot;速度&quot;,color=red]</span><br><span class="line"></span><br><span class="line">    fhp -- fattack</span><br><span class="line">    fhp -- mattack</span><br><span class="line">    fattack -- fdefense</span><br><span class="line">    fattack -- mdefense</span><br><span class="line">    fdefense -- fsattack</span><br><span class="line">    fdefense -- msattack</span><br><span class="line">    fsattack -- fsdefense</span><br><span class="line">    fsattack -- msdefense</span><br><span class="line">    fsdefense -- fspeed</span><br><span class="line">    fsdefense -- mspeed</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>使用长度为6的数组表示个体值，父母的个体值分别是<code>[1, 1, 1, 1, 1, 0]</code>和<code>[0, 1, 1, 1, 1, 1]</code>，由于只有5项能遗传父母，另外一项个体值是[0-31]区间内随机，所以用一个32位长的数组表示这个区间值，前30个元素值为0，最后一个元素值为1。两层循环外层是随机到的个体值数，范围是[0, 31]，内层循环是随机到的位置，范围是[0, 6]。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">father     = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;</span><br><span class="line">mother     = []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">children   [][]<span class="type">int</span></span><br><span class="line">scope      = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">32</span>)</span><br><span class="line">statistics = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int64</span>)</span><br><span class="line">fill       <span class="function"><span class="keyword">func</span><span class="params">([]<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">scope[<span class="number">31</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">fill = <span class="function"><span class="keyword">func</span><span class="params">(ability []<span class="type">int</span>, index, fixed <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> index &gt;= <span class="built_in">len</span>(ability) &#123;</span><br><span class="line">branch := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">copy</span>(branch, ability)</span><br><span class="line">children = <span class="built_in">append</span>(children, branch)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> index == fixed &#123;</span><br><span class="line">fill(ability, index+<span class="number">1</span>, fixed)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ability[index] = father[index]</span><br><span class="line">fill(ability, index+<span class="number">1</span>, fixed)</span><br><span class="line">ability[index] = mother[index]</span><br><span class="line">fill(ability, index+<span class="number">1</span>, fixed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">6</span>; i++ &#123;</span><br><span class="line">ability := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> scope &#123;</span><br><span class="line">ability[i] = value</span><br><span class="line">fill(ability, <span class="number">0</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> children &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> child &#123;</span><br><span class="line">sum += v</span><br><span class="line">&#125;</span><br><span class="line">statistics[sum]++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;IVs\tPercentage\n&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;6IV\t%.4f%%\n&quot;</span>, <span class="type">float64</span>(statistics[<span class="number">6</span>])*<span class="number">100</span>/<span class="type">float64</span>(<span class="built_in">len</span>(children)))</span><br><span class="line">fmt.Printf(<span class="string">&quot;5IV\t%.4f%%\n&quot;</span>, <span class="type">float64</span>(statistics[<span class="number">5</span>])*<span class="number">100</span>/<span class="type">float64</span>(<span class="built_in">len</span>(children)))</span><br><span class="line">fmt.Printf(<span class="string">&quot;4IV\t%.4f%%\n&quot;</span>, <span class="type">float64</span>(statistics[<span class="number">4</span>])*<span class="number">100</span>/<span class="type">float64</span>(<span class="built_in">len</span>(children)))</span><br><span class="line">fmt.Printf(<span class="string">&quot;3IV\t%.4f%%\n&quot;</span>, <span class="type">float64</span>(statistics[<span class="number">3</span>])*<span class="number">100</span>/<span class="type">float64</span>(<span class="built_in">len</span>(children)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>结果和上面给出来的一致，6v的概率就是1.0417%，真的只是脸黑而已_(:зゝ∠)_。</p><img src="/2019/11/23/pokemon-6v-breeding-percentage/percentage-calculator.png" class=""><p>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.</p><p>十分钟后</p><img src="/2019/11/23/pokemon-6v-breeding-percentage/dreepy.jpg" class="">]]></content>
    
    
    <summary type="html">&lt;p&gt;《宝可梦 剑&amp;#x2F;盾》发售两周了，在打通了非常尬的主线剧情后，开始了宝可梦孵蛋养殖计划。宝可梦孵蛋是指是把两只不同性别不同蛋组的宝可梦放在寄放屋，过一段游戏时间后就能获得一个宝可梦蛋，孵化宝可梦蛋可以获得一只一级的宝可梦。虽然遍地就能抓宝可梦，但通过孵蛋的方式可以获得特定遗传技能、特定特性、各项属性MAX的完美宝可梦。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="https://fancxxy.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>计算Linux系统的CPU使用率</title>
    <link href="https://fancxxy.github.io/2019/09/23/cpu-percentage/"/>
    <id>https://fancxxy.github.io/2019/09/23/cpu-percentage/</id>
    <published>2019-09-23T08:36:46.000Z</published>
    <updated>2022-07-01T07:50:13.782Z</updated>
    
    <content type="html"><![CDATA[<p>Linux系统启动后会在内存中生成一个<code>/proc</code>虚拟文件系统，内部存储了内核运行状态，计算CPU使用率用到了其中的<code>/proc/stat</code>文件。</p><span id="more"></span><h3 id="x2F-proc-x2F-stat"><a href="#x2F-proc-x2F-stat" class="headerlink" title="&#x2F;proc&#x2F;stat"></a>&#x2F;proc&#x2F;stat</h3><p><code>/proc/stat</code>文件第一行是CPU的总数据，后续带<code>cpuN</code>前缀的行是单核的数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /proc/stat</span><br><span class="line">cpu  162267 284 100504 121965754 7515 0 1107 0 0 0</span><br><span class="line">cpu0 76115 139 51012 60979072 3208 0 688 0 0 0</span><br><span class="line">cpu1 86152 144 49492 60986681 4306 0 419 0 0 0</span><br><span class="line">intr 27522326 126 9 0 0 0 0 3 0 0 0 0 0 202 0 0 0 0 0 0 0 0 0 0 0 0 1415793 26 0 156 0 1613129 2 0 0 0 338829 0 72 0 25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">ctxt 46707394</span><br><span class="line">btime 1594775312</span><br><span class="line">processes 144328</span><br><span class="line">procs_running 3</span><br><span class="line">procs_blocked 0</span><br><span class="line">softirq 25561160 0 9192916 694207 3030422 333841 0 554167 7982397 0 3773210</span><br></pre></td></tr></table></figure><p>数据的单位是<code>jiffies</code>，表示的是系统自启动以来运行在不同状态时产生的中断次数，而每秒产生的中断次数是通过<code>USER_HZ</code>定义的，是一个固定值，Linux内核默认为1000，所以用<code>jiffies/USER_HZ</code>就能得到运行时间了。</p><p>列字段的含义可以通过<code>man proc</code>查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/proc/stat</span><br><span class="line">              kernel/system statistics.  Varies with architecture.  Common entries include:</span><br><span class="line"></span><br><span class="line">              cpu  3357 0 4313 1362393</span><br><span class="line">                     The amount of time, measured in units of USER_HZ (1/100ths of  a  second  on</span><br><span class="line">                     most  architectures,  use  sysconf(_SC_CLK_TCK)  to obtain the right value),</span><br><span class="line">                     that the system spent in various states:</span><br><span class="line"></span><br><span class="line">                     user   (1) Time spent in user mode.</span><br><span class="line"></span><br><span class="line">                     nice   (2) Time spent in user mode with low priority (nice).</span><br><span class="line"></span><br><span class="line">                     system (3) Time spent in system mode.</span><br><span class="line"></span><br><span class="line">                     idle   (4) Time spent in the idle task.  This value should be USER_HZ  times</span><br><span class="line">                            the second entry in the /proc/uptime pseudo-file.</span><br><span class="line"></span><br><span class="line">                     iowait (since Linux 2.5.41)</span><br><span class="line">                            (5) Time waiting for I/O to complete.</span><br><span class="line"></span><br><span class="line">                     irq (since Linux 2.6.0-test4)</span><br><span class="line">                            (6) Time servicing interrupts.</span><br><span class="line"></span><br><span class="line">                     softirq (since Linux 2.6.0-test4)</span><br><span class="line">                            (7) Time servicing softirqs.</span><br><span class="line"></span><br><span class="line">                     steal (since Linux 2.6.11)</span><br><span class="line">                            (8)  Stolen  time, which is the time spent in other operating systems</span><br><span class="line">                            when running in a virtualized environment</span><br><span class="line"></span><br><span class="line">                     guest (since Linux 2.6.24)</span><br><span class="line">                            (9) Time spent running a virtual  CPU  for  guest  operating  systems</span><br><span class="line">                            under the control of the Linux kernel.</span><br><span class="line"></span><br><span class="line">                     guest_nice (since Linux 2.6.33)</span><br><span class="line">                            (10)  Time spent running a niced guest (virtual CPU for guest operat‐</span><br><span class="line">                            ing systems under the control of the Linux kernel).</span><br></pre></td></tr></table></figure><h3 id="使用率计算"><a href="#使用率计算" class="headerlink" title="使用率计算"></a>使用率计算</h3><p>计算CPU使用率，就是计算CPU除idle状态的其他时长之和占CPU总时长的比例，实现方法是在一个间隔时间内前后读两次<code>/proc/stat</code>文件，分别计算出两次的busy时间和total时间相除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">percent = 100 * (busy2 - busy1) / (total2 - total1)</span><br></pre></td></tr></table></figure><p>定义<code>CPUTime</code>数据结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CPUTime cpu在各种状态下的运行时间累计值</span></span><br><span class="line"><span class="keyword">type</span> CPUTime <span class="keyword">struct</span> &#123;</span><br><span class="line">Name      <span class="type">string</span>  <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">User      <span class="type">float64</span> <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">Nice      <span class="type">float64</span> <span class="string">`json:&quot;nice&quot;`</span></span><br><span class="line">System    <span class="type">float64</span> <span class="string">`json:&quot;system&quot;`</span></span><br><span class="line">Idle      <span class="type">float64</span> <span class="string">`json:&quot;idle&quot;`</span></span><br><span class="line">Iowait    <span class="type">float64</span> <span class="string">`json:&quot;iowait&quot;`</span></span><br><span class="line">Irq       <span class="type">float64</span> <span class="string">`json:&quot;irq&quot;`</span></span><br><span class="line">Softirq   <span class="type">float64</span> <span class="string">`json:&quot;softrrq&quot;`</span></span><br><span class="line">Steal     <span class="type">float64</span> <span class="string">`json:&quot;steal&quot;`</span></span><br><span class="line">Guest     <span class="type">float64</span> <span class="string">`json:&quot;guest&quot;`</span></span><br><span class="line">GuestNice <span class="type">float64</span> <span class="string">`json:&quot;guestNice&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CPUTimes()</code>函数读取<code>/proc/stat</code>文件并解析以cpu开头的行数据，返回<code>[]*CPUTime</code>数组。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CPUTimes 计算CPUTime</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CPUTimes</span><span class="params">()</span></span> ([]*CPUTime, <span class="type">error</span>) &#123;</span><br><span class="line">lines, err := utils.ReadLines(<span class="string">&quot;/proc/stat&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret []*CPUTime</span><br><span class="line"><span class="keyword">for</span> _, line := <span class="keyword">range</span> lines &#123;</span><br><span class="line"><span class="keyword">if</span> !strings.HasPrefix(line, <span class="string">&quot;cpu&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stat, err := parseStatLine(line)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">ret = <span class="built_in">append</span>(ret, stat)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseStatLine</span><span class="params">(line <span class="type">string</span>)</span></span> (*CPUTime, <span class="type">error</span>) &#123;</span><br><span class="line">fields := strings.Fields(line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(fields) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;stat line contains no cpu data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(fields[<span class="number">0</span>], <span class="string">&quot;cpu&quot;</span>) == <span class="literal">false</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;stat line not start with \&quot;cpu\&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name := fields[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">user, err := strconv.ParseFloat(fields[<span class="number">1</span>], <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nice, err := strconv.ParseFloat(fields[<span class="number">2</span>], <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system, err := strconv.ParseFloat(fields[<span class="number">3</span>], <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">idle, err := strconv.ParseFloat(fields[<span class="number">4</span>], <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iowait, err := strconv.ParseFloat(fields[<span class="number">5</span>], <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">irq, err := strconv.ParseFloat(fields[<span class="number">6</span>], <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">softirq, err := strconv.ParseFloat(fields[<span class="number">7</span>], <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">steal, err := strconv.ParseFloat(fields[<span class="number">8</span>], <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">guest, err := strconv.ParseFloat(fields[<span class="number">9</span>], <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// since Linux 2.6.33</span></span><br><span class="line">guestNice, err := strconv.ParseFloat(fields[<span class="number">10</span>], <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;CPUTime&#123;</span><br><span class="line">Name:      name,</span><br><span class="line">User:      user / hertZ,</span><br><span class="line">Nice:      nice / hertZ,</span><br><span class="line">System:    system / hertZ,</span><br><span class="line">Idle:      idle / hertZ,</span><br><span class="line">Iowait:    iowait / hertZ,</span><br><span class="line">Irq:       irq / hertZ,</span><br><span class="line">Softirq:   softirq / hertZ,</span><br><span class="line">Steal:     steal / hertZ,</span><br><span class="line">Guest:     guest / hertZ,</span><br><span class="line">GuestNice: guestNice / hertZ,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Percent()</code>函数接收一个时间段作为采样间隔，使用上面提到的公式计算CPU使用率。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Percent 获取所有核的cpu使用率</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Percent</span><span class="params">(interval time.Duration)</span></span> ([]<span class="type">float64</span>, <span class="type">error</span>) &#123;</span><br><span class="line">t1, err := CPUTimes()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(interval)</span><br><span class="line"></span><br><span class="line">t2, err := CPUTimes()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> calCPUPercent(t1, t2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calCPUPercent</span><span class="params">(time1, time2 []*CPUTime)</span></span> ([]<span class="type">float64</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(time1) != <span class="built_in">len</span>(time2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;structure of both cpu time are not equal&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret := <span class="built_in">make</span>([]<span class="type">float64</span>, <span class="number">0</span>, <span class="built_in">len</span>(time1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> time2 &#123;</span><br><span class="line">total1 := time1[i].Total()</span><br><span class="line">busy1 := total1 - time1[i].Idle</span><br><span class="line"></span><br><span class="line">total2 := time2[i].Total()</span><br><span class="line">busy2 := total2 - time2[i].Idle</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">append</span>(ret, math.Min(<span class="number">100</span>, math.Max(<span class="number">0</span>, (busy2-busy1)/(total2-total1)*<span class="number">100</span>)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置采样周期为10秒。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    percent, _ := cpu.Percent(<span class="number">10</span> * time.Second)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;percent: %f%%\n&quot;</span>, percent[<span class="number">0</span>])   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看计算结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">percent: 0.050075%</span><br></pre></td></tr></table></figure><p>为了支持连续固定的采集输出计算结果，可以存储上一次的CPU数据，调用<code>Percent()</code>函数时如果传递的参数小于等于0直接用当前采集的结果和存储的历史数据直接计算，最后更新历史数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> safeCPUTimes <span class="keyword">struct</span> &#123;</span><br><span class="line">sync.Mutex</span><br><span class="line">cpuTimes []*CPUTime</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lastCPUTimes safeCPUTimes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">lastCPUTimes.Lock()</span><br><span class="line"><span class="keyword">defer</span> lastCPUTimes.Unlock()</span><br><span class="line">lastCPUTimes.cpuTimes, _ = CPUTimes()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Percent 获取所有核的cpu使用率</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Percent</span><span class="params">(interval time.Duration)</span></span> ([]<span class="type">float64</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> t1, t2 []*CPUTime</span><br><span class="line"></span><br><span class="line">cpuTimes, err := CPUTimes()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> interval &lt;= <span class="number">0</span> &#123;</span><br><span class="line">lastCPUTimes.Lock()</span><br><span class="line">t1 = lastCPUTimes.cpuTimes</span><br><span class="line">t2 = cpuTimes</span><br><span class="line">lastCPUTimes.cpuTimes = cpuTimes</span><br><span class="line">lastCPUTimes.Unlock()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t1 = cpuTimes</span><br><span class="line">time.Sleep(interval)</span><br><span class="line">t2, err = CPUTimes()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> calCPUPercent(t1, t2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置采样周期为10秒并查看计算结果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ticker := time.NewTicker(time.Second * <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">percent, _ := cpu.Percent(<span class="number">0</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;percentage: %f%%\n&quot;</span>, percent[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">percentage: 0.100100%</span><br><span class="line">percentage: 0.100050%</span><br><span class="line">percentage: 0.050050%</span><br><span class="line">percentage: 0.100100%</span><br><span class="line">percentage: 0.050050%</span><br><span class="line">percentage: 0.100100%</span><br><span class="line">percentage: 0.100050%</span><br><span class="line">percentage: 0.050075%</span><br></pre></td></tr></table></figure><p>完整代码可以在<a href="https://github.com/fancxxy/metrics">GitHub</a>查看。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux系统启动后会在内存中生成一个&lt;code&gt;/proc&lt;/code&gt;虚拟文件系统，内部存储了内核运行状态，计算CPU使用率用到了其中的&lt;code&gt;/proc/stat&lt;/code&gt;文件。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Go" scheme="https://fancxxy.github.io/tags/Go/"/>
    
    <category term="Linux" scheme="https://fancxxy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>配置阿里云以及部署ComicWeb</title>
    <link href="https://fancxxy.github.io/2018/06/22/comic-webiste-deploy-in-aliyun/"/>
    <id>https://fancxxy.github.io/2018/06/22/comic-webiste-deploy-in-aliyun/</id>
    <published>2018-06-22T12:39:39.000Z</published>
    <updated>2022-07-01T07:50:13.764Z</updated>
    
    <content type="html"><![CDATA[<p>新购买了阿里云ecs服务器，记录一下整个配置和部署过程，操作系统是CentOS 7。</p><span id="more"></span><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -g users -G wheel -s /bin/bash username</span><br><span class="line">passwd username</span><br></pre></td></tr></table></figure><h3 id="给用户添加root权限"><a href="#给用户添加root权限" class="headerlink" title="给用户添加root权限"></a>给用户添加root权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install sudo</span><br><span class="line">EDITOR=vim visudo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username hostname=(ALL) ALL</span><br></pre></td></tr></table></figure><h3 id="切换为普通用户"><a href="#切换为普通用户" class="headerlink" title="切换为普通用户"></a>切换为普通用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - username</span><br></pre></td></tr></table></figure><h2 id="切换shell为zsh并安装oh-my-zsh"><a href="#切换shell为zsh并安装oh-my-zsh" class="headerlink" title="切换shell为zsh并安装oh-my-zsh"></a>切换shell为zsh并安装oh-my-zsh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br><span class="line">yum install zsh</span><br><span class="line">cat /etc/shells</span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>修改.zshrc的主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;gianu&quot;</span><br></pre></td></tr></table></figure><p>在.zshrc末尾添加下列配置，以修复warning: cannot set LC_CTYPE locale的提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line">export LC_CTYPE=en_US.UTF-8</span><br></pre></td></tr></table></figure><h3 id="安装epel和ius仓库"><a href="#安装epel和ius仓库" class="headerlink" title="安装epel和ius仓库"></a>安装epel和ius仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y epel-release</span><br><span class="line">sudo yum install -y https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><h3 id="安装Python3-6"><a href="#安装Python3-6" class="headerlink" title="安装Python3.6"></a>安装Python3.6</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y python36u python36u-libs python36u-devel python36u-pip</span><br></pre></td></tr></table></figure><h3 id="修改Python的源"><a href="#修改Python的源" class="headerlink" title="修改Python的源"></a>修改Python的源</h3><p>新增文件 ~&#x2F;.pip&#x2F;pip.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line">index-url=https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><h3 id="安装mariaDB"><a href="#安装mariaDB" class="headerlink" title="安装mariaDB"></a>安装mariaDB</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y mariadb-server mariadb-devel</span><br><span class="line">sudo systemctl start mariadb</span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p>修改&#x2F;etc&#x2F;my.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8mb4_unicode_ci</span><br><span class="line">character_set_server = utf8mb4</span><br><span class="line">innodb_file_format = barracuda</span><br><span class="line">innodb_file_per_table = 1</span><br><span class="line">innodb_large_prefix = 1</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br></pre></td></tr></table></figure><p>创建数据库用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user username@localhost identified by password;</span><br><span class="line">grant all privileges on database.* to username@localhost;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="部署ComicWeb"><a href="#部署ComicWeb" class="headerlink" title="部署ComicWeb"></a>部署ComicWeb</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载工程文件</span></span><br><span class="line">git clone git://github.com/fancxxy/ComicWeb.git</span><br><span class="line">cd ComicWeb/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建虚拟环境</span></span><br><span class="line">python3 -m venv venv</span><br><span class="line">source venv/bin/activate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">pip install git+git://github.com/fancxxy/comicd.git</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量，把数据库真实连接串写到env.sh中</span></span><br><span class="line">export $(cat env.sh | grep -v ^# | xargs)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">升级数据库</span></span><br><span class="line">flask db init</span><br><span class="line">flask db migrate -m &quot;initial commit&quot;</span><br><span class="line">flask db upgrade</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建web用户</span></span><br><span class="line">flask shell</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; user = User(email=<span class="string">&#x27;email&#x27;</span>, username=<span class="string">&#x27;username&#x27;</span>, password=<span class="string">&#x27;password&#x27;</span>, confirmed=True)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; db.session.add(user)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; db.session.commit()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装nginx</span></span><br><span class="line">sudo yum install nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改/etc/nginx/nginx.conf</span></span><br><span class="line">location / &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_pass 127.0.0.1:8001;</span><br><span class="line">    uwsgi_param UWSGI_PYTHON /home/fancxxy/Works/ComicWeb/venv;</span><br><span class="line">    uwsgi_param UWSGI_CHDIR /home/fancxxy/Works/ComicWeb;</span><br><span class="line">    uwsgi_param UWSGI_SCRIPT web:app;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动nginx</span></span><br><span class="line">sudo systemctl enable nginx</span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装以及配置uwsgi</span></span><br><span class="line">pip install uwsgi</span><br><span class="line">sudo cp uwsgi.service /etc/systemd/system/</span><br><span class="line">sudo systemctl enable uwsgi</span><br><span class="line">sudo systemctl start uwsgi</span><br></pre></td></tr></table></figure><h3 id="配置阿里云外部端口"><a href="#配置阿里云外部端口" class="headerlink" title="配置阿里云外部端口"></a>配置阿里云外部端口</h3><p>在网络和安全&gt;安全组中点击配置规则，添加安全组规则，配置http端口号，授权对象为0.0.0.0&#x2F;0</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;新购买了阿里云ecs服务器，记录一下整个配置和部署过程，操作系统是CentOS 7。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://fancxxy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>给comicd写的前端网站</title>
    <link href="https://fancxxy.github.io/2018/06/13/comic-website/"/>
    <id>https://fancxxy.github.io/2018/06/13/comic-website/</id>
    <published>2018-06-13T11:30:51.000Z</published>
    <updated>2022-07-01T07:50:13.765Z</updated>
    
    <content type="html"><![CDATA[<p>之前写了一个下载漫画的命令行工具comicd，确实可以轻松获取漫画资源了，但是并没有想象中的便捷。首先每次获取资源都需要执行下载命令，对于完结漫画还可以接受，一次下载一劳永逸，但对于长期连载的漫画就显得很不方便，其次不能随时随地在手机上查看，需要通过电脑下载传到手机上，所以在其基础上实现了一个web应用<a href="https://github.com/fancxxy/ComicWeb">ComicWeb</a>，可以添加想要追的漫画，定时任务自动刷新资源。</p><span id="more"></span><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><p>ComicWeb是一个订阅和观看漫画的网站，支持主流的几个漫画资源网站，项目仅供个人学习，请勿用于商业盈利。项目中使用的主要框架和组件是Flask+Bootstrap+MySQL，后端的漫画爬取功能参阅<a href="https://github.com/fancxxy/comicd">fancxxy&#x2F;comicd</a>。</p><img src="/2018/06/13/comic-website/comic-list.jpg" class=""><img src="/2018/06/13/comic-website/chapter-list.jpg" class=""><img src="/2018/06/13/comic-website/comic-picture.jpg" class=""><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>ComicWeb的后端功能是用Flask实现的，Flask是一个用Python编写的轻量级Web框架，扩展能力强，程序的工程目录大致如下，requirements.txt记录所有依赖的扩展，config.py是工程的配置文件，在初始化Flask程序实例的时候通过参数传递过去，web.py是启动脚本，在环境变量中设置启动脚本的值<code>FLASK_APP=web.py</code>，app&#x2F;templates是模板文件的存放目录，app&#x2F;static存放静态文件，app&#x2F;main是蓝本目录，程序的主要路由功能都定义在该蓝本目录下，app&#x2F;models.py定义数据库表结构，app&#x2F;auth是登录认证的蓝本，assist包含定时更新任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">|-ComicWeb</span><br><span class="line">  |-app/</span><br><span class="line">    |-templates/</span><br><span class="line">    |-static/</span><br><span class="line">    |-main/</span><br><span class="line">      |-__init__.py</span><br><span class="line">      |-errors.py</span><br><span class="line">      |-forms.py</span><br><span class="line">      |-views.py</span><br><span class="line">    |-auth/</span><br><span class="line">      |-__init__.py</span><br><span class="line">      |-forms.py</span><br><span class="line">      |-views.py</span><br><span class="line">    |-__init__.py</span><br><span class="line">    |-models.py</span><br><span class="line">  |-assist</span><br><span class="line">    |-__init__.py</span><br><span class="line">    |-update.py</span><br><span class="line">  |-requirements.txt</span><br><span class="line">  |-config.py</span><br><span class="line">  |-web.py </span><br></pre></td></tr></table></figure><h3 id="主表结构"><a href="#主表结构" class="headerlink" title="主表结构"></a>主表结构</h3><p>Flask程序一般都配合数据库抽象框架SQLAlchemy一起使用，可以使用面向对象的操作来处理数据库指令。首先需要安装Flask得扩展<code>flask-sqlalchemy</code>，包装了SQLAlchemy的操作，对于MySQL的连接串格式是<code>mysql://username:password@hostname/database</code>，同时表结构为了获得抽象能力，定义时需要继承<code>db.Model</code>类，使用<code>__tablename__</code>来确定表名，表字段通过<code>db.Column</code>创建。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>, index=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>, index=<span class="literal">True</span>)</span><br><span class="line">    password_hash = db.Column(db.String(<span class="number">128</span>))</span><br></pre></td></tr></table></figure><p>ComicWeb网站的两个主要的对象分别是用户和漫画，用户登录后可以订阅多个漫画资源，某个漫画资源同时也可以被多个用户订阅，所以对于用户和漫画的关系是Many to Many，根据SQLAlchemy的文档Many to Many的关系需要在两个类之间建立一个关联表来体现订阅关系，关联表不需要抽象，直接用<code>db.table</code>创建。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subscribers = db.Table(<span class="string">&#x27;subscribers&#x27;</span>,</span><br><span class="line">                        db.Column(<span class="string">&#x27;user_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;users.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">                        db.Column(<span class="string">&#x27;comic_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;comics.id&#x27;</span>), primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这种创建方式的表不能被抽象，意味着不能从<code>subscribers</code>表获取额外有用信息，如果想要存储订阅时间就需要抽象<code>subscribers</code>表，这里额外记录了用户对于某个漫画的订阅日期和该漫画的观看进度。关系的两端<code>User</code>和<code>Comic</code>分别通过<code>db.relationship</code>来指定对端关系，方法的第一额参数是关系对端的模型名字，<code>backref</code>参数用来在对端模型中创建一个反向引用，<code>lazy=&#39;dynamic&#39;</code>表明<code>comcis</code>的加载方式是调用<code>query</code>方法时加载记录，<code>cascade</code>参数的值由逗号分隔，把对象添加到会话后会把关联的所有对象都添加到会话，同时删除对象时会把关联的所有孤儿记录都删除掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subscriber</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;subscribers&#x27;</span></span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;users.id&#x27;</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    comic_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;comics.id&#x27;</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    subscribe_date = db.Column(db.DateTime(), default=datetime.utcnow)</span><br><span class="line">    last_chapter_id = db.Column(db.Integer)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    comics = db.relationship(<span class="string">&#x27;Subscriber&#x27;</span>, backref=db.backref(<span class="string">&#x27;user&#x27;</span>, lazy=<span class="string">&#x27;joined&#x27;</span>), lazy=<span class="string">&#x27;dynamic&#x27;</span>,</span><br><span class="line">                             cascade=<span class="string">&#x27;all, delete-orphan&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comic</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;comics&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    url = db.Column(db.String(<span class="number">256</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    interface = db.Column(db.String(<span class="number">32</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    cover = db.Column(db.String(<span class="number">256</span>))</span><br><span class="line">    summary = db.Column(db.Text())</span><br><span class="line">    newest_chapter_id = db.Column(db.Integer)</span><br><span class="line">    newest_chapter_title = db.Column(db.String(<span class="number">128</span>))</span><br><span class="line">    update_time = db.Column(db.DateTime(), default=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    users = db.relationship(<span class="string">&#x27;Subscriber&#x27;</span>, backref=db.backref(<span class="string">&#x27;comic&#x27;</span>, lazy=<span class="string">&#x27;joined&#x27;</span>), lazy=<span class="string">&#x27;dynamic&#x27;</span>,</span><br><span class="line">                            cascade=<span class="string">&#x27;all, delete-orphan&#x27;</span>)</span><br></pre></td></tr></table></figure><p>有了上述关系模型就可以很方便的查询某个用户订阅的漫画列表，以及某个漫画的所有订阅用户。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>user = User.query.filter_by(<span class="built_in">id</span>=<span class="number">1</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user</span><br><span class="line">&lt;User fxx&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[item.comic <span class="keyword">for</span> item <span class="keyword">in</span> user.comics]</span><br><span class="line">[&lt;Comic 航海王 腾讯漫画&gt;, &lt;Comic 银魂 腾讯漫画&gt;, &lt;Comic 死神/境·界 腾讯漫画&gt;, &lt;Comic 火影忍者 腾讯漫画&gt;, &lt;Comic 龙珠 腾讯漫画&gt;]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>comic = Comic.query.filter_by(<span class="built_in">id</span>=<span class="number">1</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>comic</span><br><span class="line">&lt;Comic 航海王 腾讯漫画&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[item.user <span class="keyword">for</span> item <span class="keyword">in</span> comic.users]</span><br><span class="line">[&lt;User fxx&gt;, &lt;User fancxxy&gt;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h3><p>登录以及管理会话的功能需要用到的扩展列表有</p><ul><li>flask-login: 管理已登录的用户会话</li><li>werkzeug: 计算密码散列值并在每次输入密码时进行核对</li><li>itsdangerous: 生成核对加密令牌</li></ul><p>创建登录页面的表单，需要安装扩展<code>flask_wtf</code>，表单类都继承自<code>FlaskForm</code>类，表单中的项都是wtforms模块中的类实例，<code>validatiors</code>参数是一个验证函数组成的列表，<code>render_kw</code>是一个属性字典，在渲染<code>input</code>标签时添加<code>placeholder=&quot;输入电子邮件&quot;</code>属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, BooleanField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length, Email</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    email = StringField(<span class="string">&#x27;邮件地址:&#x27;</span>, validators=[DataRequired(), Length(<span class="number">1</span>, <span class="number">64</span>), Email()], render_kw=&#123;<span class="string">&#x27;placeholder&#x27;</span>: <span class="string">&#x27;输入邮件地址&#x27;</span>&#125;)</span><br><span class="line">    password = PasswordField(<span class="string">&#x27;密码:&#x27;</span>, validators=[DataRequired()], render_kw=&#123;<span class="string">&#x27;placeholder&#x27;</span>: <span class="string">&#x27;输入密码&#x27;</span>&#125;)</span><br><span class="line">    remember_me = BooleanField(<span class="string">&#x27;保持登录&#x27;</span>)</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;登录&#x27;</span>)</span><br></pre></td></tr></table></figure><p>密码肯定不能明文存储，也不让直接读取，使用<code>@property</code>装饰物改变<code>password</code>变量的读写属性，使用<code>Werkzeug</code>的<code>security</code>模块来处理密码散列值，<code>generate_password_hash</code>方法计算输入密码的散列值，<code>check_password_hash</code>方法比较输入的密码和存储在数据库中的散列值是否匹配，<code>flask-login</code>提供了多个方法校验用户是否登录，是否激活，本地用户模型想要使用这些方法就需要继承<code>UserMixin</code>类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model, UserMixin):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">password</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;password is not a readable attribute&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @password.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">password</span>(<span class="params">self, password</span>):</span><br><span class="line">        self.password_hash = generate_password_hash(password)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_password</span>(<span class="params">self, password</span>):</span><br><span class="line">        <span class="keyword">return</span> check_password_hash(self.password_hash, password)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义登录和登出的视图函数，一旦密码验证成功后调用<code>flask-login</code>的<code>login_user</code>方法在会话中把用户标记为已登录，<code>logout_user</code>方法让用户登出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@auth.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        user = User.query.filter_by(email=form.email.data).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> user.verify_password(form.password.data):</span><br><span class="line">            login_user(user, form.remember_me.data)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.args.get(<span class="string">&#x27;next&#x27;</span>) <span class="keyword">or</span> url_for(<span class="string">&#x27;main.index&#x27;</span>))</span><br><span class="line">        flash(<span class="string">&#x27;错误的邮件地址或者密码&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    logout_user()</span><br><span class="line">    flash(<span class="string">&#x27;您已经退出&#x27;</span>, <span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;main.index&#x27;</span>))</span><br></pre></td></tr></table></figure><p>前端框架Bootstrap通过<code>flask-bootstrap</code>扩展可以很方便的和Flask的模版系统集成在一起，该扩展提供<code>quick_form</code>宏方法渲染表单对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% import &quot;bootstrap/wtf.html&quot; as wtf %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;Comic - Login&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block page_content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-12&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; wtf.quick_form(form) &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>登录页面截图</p><h3 id="功能路由"><a href="#功能路由" class="headerlink" title="功能路由"></a>功能路由</h3><p>主页面有一个订阅新漫画的输入框，下面列出该用户订阅的所有漫画列表，每个漫画资源都展示了标题、封面、更新时间和来源。<br>让用户订阅漫画的逻辑其实就是向<code>subscribers</code>表插入一条数据，在<code>User</code>模型中添加<code>subscribe</code>方法实现这个功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model, UserMixin):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subscribe</span>(<span class="params">self, comic</span>):</span><br><span class="line">        <span class="keyword">if</span> self.comics.filter_by(comic_id=comic.<span class="built_in">id</span>).first() <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        s = Subscriber(user=self, comic=comic)</span><br><span class="line">        db.session.add(s)</span><br></pre></td></tr></table></figure><p>不同网站提供的漫画封面大小不一样，为了风格统一，写了一个方法裁剪封面大小，把高度和宽度的比例设置成了4:3，需要用到Python的图像处理库<code>PIL</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crop_cover</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> Image.<span class="built_in">open</span>(filename) <span class="keyword">as</span> im:</span><br><span class="line">        width, height = im.size</span><br><span class="line"></span><br><span class="line">        <span class="comment"># width divide height must be equal 3/4</span></span><br><span class="line">        <span class="keyword">if</span> width / height &gt; <span class="number">0.75</span>:</span><br><span class="line">            w = width - height * <span class="number">0.75</span></span><br><span class="line">            im.crop((w // <span class="number">2</span>, <span class="number">0</span>, width - w // <span class="number">2</span>, height)).save(filename)</span><br><span class="line">            im.crop((<span class="number">0</span>, <span class="number">10</span>, <span class="number">300</span>, <span class="number">400</span>)).save()</span><br><span class="line">        <span class="keyword">elif</span> width / height &lt; <span class="number">0.75</span>:</span><br><span class="line">            h = height - width // <span class="number">0.75</span></span><br><span class="line">            im.crop((<span class="number">0</span>, h // <span class="number">2</span>, width, height - h // <span class="number">2</span>)).save(filename)</span><br></pre></td></tr></table></figure><p>章节作为资源对象也需要被抽象化，<code>Comic</code>跟<code>Chapter</code>的关系是one to many，需要在<code>Comic</code>模型中指明关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Chapter</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;chapters&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    url = db.Column(db.String(<span class="number">256</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    chapter_no = db.Column(db.Integer)</span><br><span class="line">    title = db.Column(db.String(<span class="number">128</span>))</span><br><span class="line">    interface = db.Column(db.String(<span class="number">32</span>))</span><br><span class="line">    comic_title = db.Column(db.String(<span class="number">128</span>))</span><br><span class="line">    comic_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;comics.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    update_time = db.Column(db.DateTime(), default=datetime.utcnow)</span><br><span class="line">    path = db.Column(db.String(<span class="number">256</span>), default=<span class="literal">None</span>)</span><br><span class="line">    __table_args__ = (db.UniqueConstraint(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;comic_title&#x27;</span>, <span class="string">&#x27;interface&#x27;</span>, name=<span class="string">&#x27;uc_title_comic_title_interface&#x27;</span>),</span><br><span class="line">                      db.UniqueConstraint(<span class="string">&#x27;chapter_no&#x27;</span>, <span class="string">&#x27;comic_id&#x27;</span>, name=<span class="string">&#x27;uc_no_id&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Chapter &#123;&#125; &#123;&#125; &#123;&#125;&gt;&#x27;</span>.<span class="built_in">format</span>(self.comic_title, self.title, self.interface)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comic</span>(db.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    chapters = db.relationship(<span class="string">&#x27;Chapter&#x27;</span>, backref=<span class="string">&#x27;comic&#x27;</span>, lazy=<span class="string">&#x27;dynamic&#x27;</span>)</span><br></pre></td></tr></table></figure><p>订阅漫画表单需要校验漫画来源是否支持，<code>ComicWeb</code>获取漫画资源使用的是<code>comicd</code>的接口，<code>comicd</code>提供的<code>Comic.find</code>静态方法可以校验提交的url地址是否支持，不支持会抛出<code>ComicdError</code>的异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> comicd <span class="keyword">import</span> Comic, ComicdError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubscribeForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    url = StringField(<span class="string">&#x27;Comic URL:&#x27;</span>, validators=[DataRequired(), URL()], render_kw=&#123;<span class="string">&#x27;placeholder&#x27;</span>: <span class="string">&#x27;输入漫画网址&#x27;</span>&#125;)</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;订阅&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_url</span>(<span class="params">self, field</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Comic.find(field.data)</span><br><span class="line">        <span class="keyword">except</span> ComicdError:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;只支持 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">list</span>(Comic.support()))))</span><br></pre></td></tr></table></figure><p>主页面视图函数的逻辑是这样的，首先验证一下提交的表单数据，如果提交的漫画数据已经存在在数据库中，则直接让用户订阅该漫画，如果漫画还没收录就需要使用<code>comicd</code>提供的接口去对应网站请求漫画数据，向<code>comics</code>表插入漫画数据，下载漫画封面，让用户订阅漫画，向<code>chapters</code>表插入所有章节的数据，业务处理完成后重定向到主页面，通过分页查询返回数据，最后渲染页面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@main.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    form = SubscribeForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        comic = Comic.query.filter_by(url=form.url.data).first()</span><br><span class="line">        <span class="keyword">if</span> comic:</span><br><span class="line">            current_user.subscribe(comic)</span><br><span class="line">            flash(<span class="string">&#x27;订阅成功&#x27;</span>, <span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;main.index&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c = cc(form.url.data)</span><br><span class="line">            <span class="keyword">if</span> c.init():</span><br><span class="line">                <span class="built_in">hash</span> = md5((c.instance.name + c.title).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">                comic = Comic(url=c.url, title=c.title, interface=c.instance.name, cover=<span class="built_in">hash</span> + <span class="string">&#x27;.jpg&#x27;</span>,</span><br><span class="line">                              summary=c.summary)</span><br><span class="line">                r, f = c.download_cover(<span class="string">&#x27;app/static/covers&#x27;</span>, comic.cover)</span><br><span class="line">                <span class="keyword">if</span> r:</span><br><span class="line">                    crop_cover(f)</span><br><span class="line">                current_user.subscribe(comic)</span><br><span class="line">                db.session.add(comic)</span><br><span class="line">                db.session.commit()</span><br><span class="line">                index = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> title, url <span class="keyword">in</span> c.chapters:</span><br><span class="line">                    chapter = Chapter(title=title, comic_title=comic.title, interface=comic.interface, url=url,</span><br><span class="line">                                      comic_id=comic.<span class="built_in">id</span>, chapter_no=index)</span><br><span class="line">                    db.session.add(chapter)</span><br><span class="line">                    index += <span class="number">1</span></span><br><span class="line">                db.session.commit()</span><br><span class="line">                chapter = Chapter.query.filter_by(comic_id=comic.<span class="built_in">id</span>).order_by(db.desc(Chapter.<span class="built_in">id</span>)).first()</span><br><span class="line">                comic.newest_chapter_id, comic.newest_chapter_title = chapter.<span class="built_in">id</span>, chapter.title</span><br><span class="line">                db.session.add(comic)</span><br><span class="line">                db.session.commit()</span><br><span class="line">                flash(<span class="string">&#x27;订阅成功&#x27;</span>, <span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;main.index&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flash(<span class="string">&#x27;订阅失败&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>)</span><br><span class="line">    page = request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">    pagination = current_user.comics.paginate(page, per_page=current_app.config[<span class="string">&#x27;COMICS_PER_PAGE&#x27;</span>], error_out=<span class="literal">False</span>)</span><br><span class="line">    comics = [item.comic <span class="keyword">for</span> item <span class="keyword">in</span> pagination.items]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, comics=comics, pagination=pagination, form=form)</span><br></pre></td></tr></table></figure><p>表单框不能使用<code>form.quick_form()</code>直接渲染，手写一个输入框，<code>form.hidden_tag()</code>是为了隐藏CSRF信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-form&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.url(class=&quot;form-control input-sm&quot;) &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-btn&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; form.submit(class=&quot;btn btn-primary btn-sm&quot;) &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加订阅的逻辑是向<code>subscribers</code>表插入数据，那么取消订阅的逻辑就是删除这条数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@main.route(<span class="params"><span class="string">&#x27;/unsubscribe/&lt;id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unsubscribe</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    subscriber = Subscriber.query.filter_by(user_id=current_user.<span class="built_in">id</span>, comic_id=<span class="built_in">id</span>).first()</span><br><span class="line">    <span class="keyword">if</span> subscriber:</span><br><span class="line">        db.session.delete(subscriber)</span><br><span class="line">    flash(<span class="string">&#x27;取消订阅&#x27;</span>, <span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;main.index&#x27;</span>))</span><br></pre></td></tr></table></figure><p>取消按钮放在封面图的左下角，当鼠标移动过去背景设置为黑色半透明，移开之后背景设置为透明，<code>:hover</code>选择器可以控制鼠标指针浮动的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.shownn</span> <span class="selector-class">.unsubscribe</span> &#123;</span><br><span class="line">    <span class="comment">/* */</span></span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shownn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.unsubscribe</span> &#123;</span><br><span class="line">    <span class="comment">/* */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shownn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;unsubscribe&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;main.unsubscribe&#x27;, id=comic.id) &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;取消订阅&quot;</span>&gt;</span>取消订阅<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>漫画主页的路由是<code>/comics/&lt;id&gt;</code>，这个页面展示了更详细的漫画信息、观看进度以及章节标题，观看进度保存在了<code>subscribers</code>表中，需要用<code>user_id</code>和<code>comic_id</code>去表里查询数据，<code>pagination(page, per_page=20, error_out=False)</code>方法由<code>flask-sqlalchemy</code>提供，方法返回一个<code>Pagination</code>分页对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@main.route(<span class="params"><span class="string">&#x27;/comics/&lt;id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">comic</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    comic = Comic.query.get_or_404(<span class="built_in">id</span>)</span><br><span class="line">    page = request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">    pagination = comic.chapters.order_by(db.desc(Chapter.<span class="built_in">id</span>)).paginate(page,</span><br><span class="line">                                                                       per_page=current_app.config[<span class="string">&#x27;CHAPTERS_PER_PAGE&#x27;</span>],</span><br><span class="line">                                                                       error_out=<span class="literal">False</span>)</span><br><span class="line">    chapters = pagination.items</span><br><span class="line">    last_chapter = Chapter.query.filter_by(<span class="built_in">id</span>=Subscriber.query.filter_by(user_id=current_user.<span class="built_in">id</span>,</span><br><span class="line">                                                                         comic_id=<span class="built_in">id</span>).first().last_chapter_id).first()</span><br><span class="line">    newest_chapter = Chapter.query.filter_by(<span class="built_in">id</span>=comic.newest_chapter_id).first()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;comic.html&#x27;</span>, comic=comic, chapters=chapters, pagination=pagination,</span><br><span class="line">                           last_chapter=last_chapter, newest_chapter=newest_chapter)</span><br></pre></td></tr></table></figure><p><code>Pagination</code>分页对象提供<code>iter_pages</code>方法返回一个迭代器，存储的是分页导航显示的页数列表，在flasky的示例代码中就用这个迭代器创建了一个分页导航，这里我直接拿来用了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro pagination_widget(pagination, endpoint) %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">        &lt;li&#123;% if not pagination.has_prev %&#125; class=&quot;disabled&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% if pagination.has_prev %&#125;&#123;&#123; url_for(endpoint, page=pagination.prev_num, **kwargs) &#125;&#125;&#123;% else %&#125;#&#123;% endif %&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="symbol">&amp;laquo;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% for p in pagination.iter_pages(left_edge=1, left_current=1, right_current=3, right_edge=1) %&#125;</span><br><span class="line">            &#123;% if p %&#125;</span><br><span class="line">                &#123;% if p == pagination.page %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(endpoint, page = p, **kwargs) &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; p &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(endpoint, page = p, **kwargs) &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; p &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="symbol">&amp;hellip;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &lt;li&#123;% if not pagination.has_next %&#125; class=&quot;disabled&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% if pagination.has_next %&#125;&#123;&#123; url_for(endpoint, page=pagination.next_num, **kwargs) &#125;&#125;&#123;% else %&#125;#&#123;% endif %&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="symbol">&amp;raquo;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p>图片也是资源，每张图片都有一条记录在<code>images</code>表里，以<code>comic_id</code>和<code>chapter_id</code>作为外键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;images&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    comic_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;comics.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    chapter_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;chapters.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    image_no = db.Column(db.Integer, nullable=<span class="literal">False</span>)</span><br><span class="line">    path = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>图片资源的下载逻辑是这样的，有用户第一次请求该章节数据，去对应网站下载图片资源，把每张图片编号，编号和路径存储到<code>images</code>表中，之后再有用户请求该章节直接从<code>images</code>表给出查询结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@main.route(<span class="params"><span class="string">&#x27;/comics/&lt;id&gt;/&lt;no&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chapter</span>(<span class="params"><span class="built_in">id</span>, no</span>):</span><br><span class="line">    chapter = Chapter.query.filter_by(comic_id=<span class="built_in">id</span>, chapter_no=no).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> chapter.path:</span><br><span class="line">        c = cr(chapter.url)</span><br><span class="line">        <span class="keyword">if</span> c.init():</span><br><span class="line">            c.download()</span><br><span class="line">        count, chapter.path = <span class="number">1</span>, join(cg.home, quote(c.title), quote(c.ctitle))</span><br><span class="line">        <span class="keyword">if</span> exists(chapter.path):</span><br><span class="line">            files = <span class="built_in">sorted</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> listdir(chapter.path) <span class="keyword">if</span> splitext(i)[<span class="number">1</span>] == <span class="string">&#x27;.jpg&#x27;</span>], key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[:-<span class="number">4</span>]))</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                image = Image(comic_id=<span class="built_in">id</span>, chapter_id=chapter.<span class="built_in">id</span>, image_no=count,</span><br><span class="line">                              path=join(quote(c.title), quote(c.ctitle), file))</span><br><span class="line">                db.session.add(image)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    subscriber = Subscriber.query.filter_by(user_id=current_user.<span class="built_in">id</span>, comic_id=chapter.comic_id).first()</span><br><span class="line">    subscriber.last_chapter_id = chapter.<span class="built_in">id</span></span><br><span class="line">    db.session.add(subscriber)</span><br><span class="line">    images = Image.query.filter_by(comic_id=<span class="built_in">id</span>, chapter_id=chapter.<span class="built_in">id</span>).order_by(Image.image_no).<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;chapter.html&#x27;</span>, chapter=chapter, images=images, previous=request.referrer)</span><br></pre></td></tr></table></figure><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>长期连载的漫画会不定期更新，需要写一个方法来更新漫画章节目录，通过<code>comicd</code>的接口请求当前漫画的章节列表，判断列表末尾的数据和当前数据库的最新章节是否相同，如果不同说明有新章节更新了，在请求到的章节列表中找到当前数据库标记的最新章节数据的索引，索引后面的章节信息就是本次需要插到数据库的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Comic</span>(db.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        c = cc(self.url)</span><br><span class="line">        <span class="keyword">if</span> c.init():</span><br><span class="line">            chapter = Chapter.query.filter_by(<span class="built_in">id</span>=self.newest_chapter_id).first()</span><br><span class="line">            <span class="keyword">if</span> chapter <span class="keyword">and</span> chapter.title != c.chapters[-<span class="number">1</span>][<span class="number">0</span>]:</span><br><span class="line">                new_chapters = c.chapters[c.chapters.index((chapter.title, chapter.url)) + <span class="number">1</span>:]</span><br><span class="line">                no = chapter.chapter_no + <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> title, url <span class="keyword">in</span> new_chapters:</span><br><span class="line">                    chapter = Chapter(title=title, comic_title=self.title, interface=self.interface, url=url,</span><br><span class="line">                                      comic_id=self.<span class="built_in">id</span>, chapter_no=no)</span><br><span class="line">                    db.session.add(chapter)</span><br><span class="line">                    no += <span class="number">1</span></span><br><span class="line">                new_chapter = Chapter.query.filter_by(comic_id=self.<span class="built_in">id</span>).order_by(db.desc(Chapter.<span class="built_in">id</span>)).first()</span><br><span class="line">                self.newest_chapter_id, self.newest_chapter_title = new_chapter.<span class="built_in">id</span>, new_chapter.title</span><br><span class="line">                self.update_time = datetime.utcnow()</span><br><span class="line">                db.session.add(self)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;comic &#123;&#125; update at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.title, datetime.utcnow().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>))</span><br></pre></td></tr></table></figure><p>在assist&#x2F;update.py文件中添加更新的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_comics</span>():</span><br><span class="line">    <span class="keyword">with</span> db.app.app_context():</span><br><span class="line">        [comic.update() <span class="keyword">for</span> comic <span class="keyword">in</span> Comic.query.<span class="built_in">all</span>()]</span><br></pre></td></tr></table></figure><p>定时任务通过<code>flask-apscheduler</code>扩展实现，设置每隔一段时间调用上面的更新方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> assist.update <span class="keyword">import</span> update_comics</span><br><span class="line">    cron.add_job(<span class="built_in">id</span>=<span class="string">&#x27;update_comics&#x27;</span>, func=update_comics, trigger=<span class="string">&#x27;interval&#x27;</span>, hours=app.config[<span class="string">&#x27;UPDATE_HOURS&#x27;</span>])</span><br><span class="line">    cron.start()</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>最后一步是部署，一般使用的web服务器是uwsgi，通过uWSGI协议和Flask程序交换数据，外部使用nginx转发请求。</p><p>uwsgi的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"># uwsgi 启动时所使用的地址与端口</span><br><span class="line">socket = 127.0.0.1:8001 </span><br><span class="line"></span><br><span class="line"># 指向网站目录</span><br><span class="line">chdir = /home/fancxxy/Works/ComicWeb</span><br><span class="line"></span><br><span class="line"># python 启动程序文件</span><br><span class="line">wsgi-file = /home/fancxxy/Works/ComicWeb/web.py</span><br><span class="line"></span><br><span class="line"># python 程序内用以启动的 application 变量名</span><br><span class="line">callable = app</span><br><span class="line"></span><br><span class="line"># 处理器数</span><br><span class="line">processes = 4</span><br><span class="line"></span><br><span class="line"># 线程数</span><br><span class="line">threads = 2</span><br><span class="line"></span><br><span class="line">#状态检测地址</span><br><span class="line">stats = 127.0.0.1:9191</span><br></pre></td></tr></table></figure><p>nginx的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_pass 127.0.0.1:8001;</span><br><span class="line">    uwsgi_param UWSGI_PYTHON /home/fancxxy/Works/ComicWeb/venv;</span><br><span class="line">    uwsgi_param UWSGI_CHDIR /home/fancxxy/Works/ComicWeb;</span><br><span class="line">    uwsgi_param UWSGI_SCRIPT web:app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>uwsgi通过systemd启动，给uwsgi写了一个启动脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=uWSGI script by fancxxy</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/fancxxy/Works/ComicWeb/venv/bin/uwsgi --ini /home/fancxxy/Works/ComicWeb/uwsgi.ini</span><br><span class="line">Restart=always</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">Type=notify</span><br><span class="line">StandardError=syslog</span><br><span class="line">NotifyAccess=all</span><br><span class="line">EnvironmentFile=/home/fancxxy/Works/ComicWeb/env.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写了一个下载漫画的命令行工具comicd，确实可以轻松获取漫画资源了，但是并没有想象中的便捷。首先每次获取资源都需要执行下载命令，对于完结漫画还可以接受，一次下载一劳永逸，但对于长期连载的漫画就显得很不方便，其次不能随时随地在手机上查看，需要通过电脑下载传到手机上，所以在其基础上实现了一个web应用&lt;a href=&quot;https://github.com/fancxxy/ComicWeb&quot;&gt;ComicWeb&lt;/a&gt;，可以添加想要追的漫画，定时任务自动刷新资源。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://fancxxy.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>漫画下载器</title>
    <link href="https://fancxxy.github.io/2018/04/17/comic-downloader/"/>
    <id>https://fancxxy.github.io/2018/04/17/comic-downloader/</id>
    <published>2018-04-17T12:21:17.000Z</published>
    <updated>2022-07-01T07:50:13.780Z</updated>
    
    <content type="html"><![CDATA[<p>为了解决自己喜欢看漫画却没有好的观看体验的问题，用Python写了工具comicd，配合iOS上的iComics体验有了质的提升，不用再去忍受各种web和APP的弹窗推送。</p><p>comicd完全使用Python3标准库编写，未使用第三方模块，这篇文章是回顾我开发的过程，记录当时的一些思路，涉及到的知识点有基本Python语法、多线程、HTTP协议等。</p><p>comicd可以以命令的方式运行，也可以以包的形式导入作为应用代码的接口，目前支持的站点有腾讯漫画、网易漫画、动漫之家、动漫屋，想要自定义添加新的站点，只需要继承抽象接口类并实现所有必要的方法。</p><span id="more"></span><img src="/2018/04/17/comic-downloader/comicd.gif" class=""><p>复杂的程序都是由简单组件组成的，首先介绍程序内的几个功能类。</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>下载资源需要向资源站点发送HTTP请求，使用标准库的urllib包创建一个<code>Request</code>类对象，模拟发送请求。在<code>Request</code>类对象中创建默认的请求首部，包括内容协商、支持的压缩格式以及浏览器标示。<code>request</code>方法可以指定额外的请求首部，比如Host或者Referer，函数返回值是HTTP响应的主体部分。<code>urllib.parse.quote</code>方法对URL进行编码处理，除了指定的字符之外全部编码成加utf-8格式，用于网络传输。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">from</span> gzip <span class="keyword">import</span> decompress</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Request</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    default = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,en-US;q=0.5&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:54.0) Gecko/20100101 Firefox/54.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> headers:</span><br><span class="line">            headers = &#123;**self.default, **headers&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            headers = self.default</span><br><span class="line">        url = urllib.parse.quote(url, safe=<span class="string">&#x27;%/:?=&amp;[]&#x27;</span>)</span><br><span class="line">        req = urllib.request.Request(url, data=data, headers=headers)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> urllib.request.urlopen(req) <span class="keyword">as</span> res:</span><br><span class="line">                <span class="keyword">if</span> res.getheader(<span class="string">&#x27;Content-Encoding&#x27;</span>) == <span class="string">&#x27;gzip&#x27;</span>:</span><br><span class="line">                    res = decompress(res.read())</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res = res.read()</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><code>request</code>方法已经获取到了HTTP响应内容，根据获取到的内容不同处理方式也不相同。<code>content</code>方法对响应解码返回str。<code>page</code>方法用来保存网页到指定文件，如果没有指定文件名默认保存在当前目录下，正则表达式<code>r&#39;(?&lt;=&lt;title&gt;).*?(?=&lt;/title&gt;)&#39;)</code>获取网页的标题，正向前视断言<code>(?=exp)</code>和正向后视断言<code>(?&lt;=exp)</code>同时使用可以获取任意节点的内容。对于图像数据，直接保存原始的二进制数据，调用<code>binary</code>方法存储图像文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Request</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">content</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span></span>):</span><br><span class="line">        response = self.request(url, data, headers)</span><br><span class="line">        <span class="keyword">if</span> response:</span><br><span class="line">            <span class="keyword">return</span> response.decode(<span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">page</span>(<span class="params">self, url, file=<span class="literal">None</span>, data=<span class="literal">None</span>, headers=<span class="literal">None</span></span>):</span><br><span class="line">        response = self.request(url, data, headers).decode(<span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> response:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file:</span><br><span class="line">            pattern = <span class="built_in">compile</span>(<span class="string">r&#x27;(?&lt;=&lt;title&gt;).*?(?=&lt;/title&gt;)&#x27;</span>)</span><br><span class="line">            result = pattern.search(response)</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                file = result.group(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file = <span class="string">&#x27;comic_&#x27;</span> + strftime(<span class="string">&#x27;%Y%m%d_%H%M%S&#x27;</span>, localtime(time()))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file + <span class="string">&#x27;.html&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">binary</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span></span>):</span><br><span class="line">        response = self.request(url, data=data, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response:</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>日志可以用来调试程序，定位问题，甚至可以分析用户习惯。Python标准库的<code>logging</code>模块提供记录日志的功能，利用<code>logging</code>模块封装一下自己的日志类，把它设置成单例模式，先创建一个单例类对象<code>Singleton</code>，让<code>Log</code>类继承获得单例属性。Python中创建单例模式的方式有多种，这里采用的方法是用<code>__new__</code>方法控制实例对象的创建。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            cls._instance = <span class="built_in">super</span>(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Log</span>(<span class="title class_ inherited__">Singleton</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;logger&#x27;</span>):</span><br><span class="line">            self.logger = logging.getLogger(<span class="string">&#x27;comicd&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            handler = logging.StreamHandler(stream=stderr)</span><br><span class="line"></span><br><span class="line">            fmt = <span class="string">&#x27;%(message)s&#x27;</span></span><br><span class="line">            formatter = logging.Formatter(fmt, datefmt=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">            handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">            self.logger.setLevel(logging.INFO)</span><br><span class="line">            handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">            self.logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self, message</span>):</span><br><span class="line">        self.logger.info(message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">warning</span>(<span class="params">self, message</span>):</span><br><span class="line">        self.logger.warning(message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">error</span>(<span class="params">self, message</span>):</span><br><span class="line">        self.logger.error(message)</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置文件通过<code>Config</code>类定义，提供可修改的配置有下载主目录，线程数量，失败请求的重试次数。<code>@property</code>装饰器可以把方法变成属性，添加参数判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">Singleton</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, home=<span class="string">&#x27;~/Comics&#x27;</span>, comic=<span class="number">1</span>, chapter=<span class="number">1</span>, image=<span class="number">5</span>, repeat=<span class="number">3</span>, mode=<span class="string">&#x27;crawler&#x27;</span></span>):</span><br><span class="line">        self._home = expanduser(home)</span><br><span class="line"></span><br><span class="line">        self.log = join(self._home, <span class="string">&#x27;.comicd.log&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.serialize = join(self._home, <span class="string">&#x27;.comicd.dat&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self._threads = [comic, chapter, image]</span><br><span class="line"></span><br><span class="line">        self.repeat = repeat</span><br><span class="line"></span><br><span class="line">        self.mode = mode</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._home</span><br><span class="line"></span><br><span class="line"><span class="meta">    @home.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">self, value</span>):</span><br><span class="line">        self._home = expanduser(value)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threads</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._threads</span><br><span class="line"></span><br><span class="line"><span class="meta">    @threads.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threads</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="built_in">len</span>(value) != <span class="number">3</span>:</span><br><span class="line">            value = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">        self._threads = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Config object home=\&#x27;&#123;&#125;\&#x27; threads=&#123;&#123;comic:&#123;&#125;, chapter:&#123;&#125;, image:&#123;&#125;&#125;&#125; repeat=&#123;&#125; mode=&#123;&#125;&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self._home, self.threads[<span class="number">0</span>], self.threads[<span class="number">1</span>], self.threads[<span class="number">2</span>], self.repeat, self.mode)</span><br><span class="line"></span><br><span class="line">    __str__ = __repr__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config = Config()</span><br></pre></td></tr></table></figure><p><code>config</code>实例对象作为暴露给外部的接口，为了让它更像是类对象，实现<code>__call__</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">Singleton</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, home=<span class="string">&#x27;~/Comics&#x27;</span>, comic=<span class="number">1</span>, chapter=<span class="number">1</span>, image=<span class="number">5</span>, repeat=<span class="number">3</span>, mode=<span class="string">&#x27;crawler&#x27;</span></span>):</span><br><span class="line">        self.__init__(home, comic, chapter, image, repeat, mode)</span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>有了以上三个功能类之后，我们就可以来写业务了。创建<code>interface</code>包用来实现漫画站点的解析功能，每个网站的解析都用一个类对象表示并放在单独的模块中。定义<code>Web</code>基类来规定接口，所有的网站解析类都要继承<code>Web</code>类对象，以保证<code>Comic</code>和<code>Chapter</code>模型(后面会介绍)调用解析接口不会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Web</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    _pattern = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._request = Request()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">url</span>(<span class="params">self, url</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._pattern[<span class="string">&#x27;comic_url&#x27;</span>].match(url).group()</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">curl</span>(<span class="params">self, url</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._pattern[<span class="string">&#x27;chapter_url&#x27;</span>].match(url).group()</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>为了方便扩展，解析模块以文件为单位动态加载。每个网站的解析类都放在同名的文件中，例如腾讯漫画的解析类名是<code>Tencent</code>，存放在<code>tencent.py</code>文件中。实现动态加载的过程是这样的，先遍历interface包获取所有模块的文件名，对应解析类的类名就是文件名首字母大写，根据Python的反射特性获取类名以及<code>host</code>属性，动态创建解析实例对象，存放在以<code>host</code>为key字典中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Interface</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._interface = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        path = dirname(__file__)</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> listdir(path):</span><br><span class="line">            name, extension = splitext(file)</span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">&#x27;__init__&#x27;</span> <span class="keyword">or</span> extension != <span class="string">&#x27;.py&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            mod = import_module(<span class="string">&#x27;comicd.interface.&#x27;</span> + name)</span><br><span class="line">            cls = <span class="built_in">getattr</span>(mod, name.capitalize())</span><br><span class="line">            host = <span class="built_in">getattr</span>(cls, <span class="string">&#x27;host&#x27;</span>)</span><br><span class="line">            self._interface[host[<span class="number">0</span>]] = cls()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> self._interface[key]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lists</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;cls.name <span class="keyword">for</span> cls <span class="keyword">in</span> self._interface.values()&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @lists.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lists</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;lists is not a writable attribute&#x27;</span>)</span><br></pre></td></tr></table></figure><p>至于解析类需要实现的方法要根据<code>Comic</code>和<code>Chapter</code>这两个模型来确定。</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p><code>Comic</code>和<code>Chapter</code>模型分别表示漫画和章节，这两个类对象也是暴露给外部代码调用的接口，模型对象通过调用内部<code>interface</code>接口来解析并获取漫画的数据内容。<code>Comic</code>和<code>Chapter</code>都继承自基类<code>Model</code>，<code>Model</code>中实现两个基本的类方法。<code>find</code>方法根据正则表达式来获取输入的的url地址的netloc，在interface字典中查找对应的解析实例对象。<code>support</code>方法列出所有支持的网站列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> comicd.interface <span class="keyword">import</span> interface</span><br><span class="line"><span class="keyword">from</span> comicd.config <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.instance = <span class="literal">None</span></span><br><span class="line">        self.repeat = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">cls, url</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pattern = <span class="built_in">compile</span>(<span class="string">r&#x27;https?://([^/]+?)/&#x27;</span>)</span><br><span class="line">            host = pattern.search(url).group(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> interface[host]</span><br><span class="line">        <span class="keyword">except</span> (AttributeError, KeyError):</span><br><span class="line">            <span class="keyword">raise</span> ComicdError(<span class="string">&#x27;comicd does not support this website&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">support</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> interface.lists</span><br></pre></td></tr></table></figure><p><code>Comic</code>对象包含漫画的所有内容，可以使用多线程来加快内容的获取。虽然CPython有GIL锁的限制，但是网络请求属于IO密集型的任务，所以使用多线程不受GIL锁影响。为了不让主线程在创建实例的时候等待响应而阻塞，初始化的时候只绑定不需要发送请求就能获取到的属性，而在之后需要访问其他属性时再发送请求并解析响应。</p><p>所以我利用描述器的特性创建一个<code>LazyProperty</code>装饰器来延迟初始化，原理就是用装饰器把类方法装饰成描述器，在第一次访问某个方法时，在漫画实例的<code>__dict__</code>查找，没有找到再到漫画类的<code>__dict__</code>中查找，找到之后调用方法并把返回的结果放到实例对象的<code>__dict__</code>中，之后再访问该描述器时就能直接从实例对象的<code>__dict__</code>获取结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LazyProperty</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, <span class="built_in">type</span>=<span class="literal">None</span></span>):</span><br><span class="line">        val = self.func(instance)</span><br><span class="line">        <span class="built_in">setattr</span>(instance, self.func.__name__, val)</span><br><span class="line">        <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure><p>初始化时只绑定了两个实例属性，<code>self.instance</code>是解析漫画内容的实例对象，<code>self.url</code>是漫画的主页地址，在工作线程中可以调用<code>init</code>方法来强制获取所有属性的值。<code>data</code>属性存放HTTP的响应主体，<code>title</code>、<code>chapters</code>和<code>summary</code>分别是漫画标题，章节列表和简介，它们的获取方式都是通过把<code>data</code>属性传给<code>interface</code>接口，由<code>interface</code>接口解析返回结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> comicd.utils <span class="keyword">import</span> LazyProperty <span class="keyword">as</span> Lazy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comic</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.instance = Model.find(url)</span><br><span class="line">        self.url = self._check(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.title == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> self.summary == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> self.chapters == []:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @Lazy</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.instance.comic(self.url)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Lazy</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self</span>):</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.data:</span><br><span class="line">            title = self.instance.title(self.data)</span><br><span class="line">        <span class="keyword">return</span> title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Lazy</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chapters</span>(<span class="params">self</span>):</span><br><span class="line">        chapters = []</span><br><span class="line">        <span class="keyword">if</span> self.data:</span><br><span class="line">            chapters = self.instance.chapters(self.data)</span><br><span class="line">        <span class="keyword">return</span> chapters</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Lazy</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">summary</span>(<span class="params">self</span>):</span><br><span class="line">        summary = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.data:</span><br><span class="line">            summary = self.instance.summary(self.data)</span><br><span class="line">        <span class="keyword">return</span> summary.strip(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">from</span> comicd.crawler <span class="keyword">import</span> Crawler</span><br><span class="line">        crawler = Crawler()</span><br><span class="line">        crawler.put(<span class="string">&#x27;Comic&#x27;</span>, self)</span><br><span class="line">        crawler.crawl()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_check</span>(<span class="params">self, raw_url</span>):</span><br><span class="line">        url = self.instance.url(raw_url)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">            <span class="keyword">raise</span> ComicdError(<span class="string">&#x27;comic url is incorrect&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Comic object interface=\&#x27;&#123;&#125;\&#x27; title=\&#x27;&#123;&#125;\&#x27;&gt;&#x27;</span>.<span class="built_in">format</span>(self.instance.name, self.title)</span><br><span class="line"></span><br><span class="line">    __str__ = __repr__</span><br></pre></td></tr></table></figure><p><code>Chapter</code>类的处理方式和<code>Comic</code>类似，用来获取章节的信息，两个类都提供了<code>download</code>方法来下载资源，<code>Chapter</code>类解析可以获得图片资源的真实地址，另外创建内部使用的模型<code>Image</code>来作为图片对象，<code>Image</code>类对象不对外公开，每个实例表示一张图片资源，<code>Chapter</code>实例对象解析出图片地址后批量初始化<code>Image</code>实例放到资源队列中，由其他工作线程下载对应图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url, instance, filename, referer, title=<span class="literal">None</span>, ctitle=<span class="literal">None</span>, page=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.url = url</span><br><span class="line">        self.instance = instance</span><br><span class="line">        self.filename = filename</span><br><span class="line">        self.referer = referer</span><br><span class="line"></span><br><span class="line">        self.title = title</span><br><span class="line">        self.ctitle = ctitle</span><br><span class="line">        self.page = page</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">self</span>):</span><br><span class="line">        complete = <span class="literal">False</span></span><br><span class="line">        binary = self.instance.image(self.url, self.referer)</span><br><span class="line">        <span class="keyword">if</span> binary:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(self.filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> image:</span><br><span class="line">                image.write(binary)</span><br><span class="line">            complete = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> complete</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Image object interface=\&#x27;&#123;&#125;\&#x27; title=\&#x27;&#123;&#125;\&#x27;, &#x27;</span> \</span><br><span class="line">               <span class="string">&#x27;ctitle=\&#x27;&#123;&#125;\&#x27;, page=\&#x27;&#123;&#125;\&#x27;&gt;&#x27;</span>.<span class="built_in">format</span>(self.instance.name, self.title, self.ctitle, self.page)</span><br><span class="line"></span><br><span class="line">    __str__ = __repr__</span><br></pre></td></tr></table></figure><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>comicd本质就是一个爬虫，从输入漫画的主页地址开始，解析出漫画的所有章节地址，每获得一个章节地址就去解析该章节包含的所有图片的链接，通过链接下载资源。</p><p>为了完成上述功能，需要创建一个<code>Crawler</code>类，类三个队列分别用来存放<code>Comic</code>、<code>Chapter</code>以及<code>Image</code>实例对象，另外还需要初始化多个线程来处理上述队列中的实例对象。<code>initialize</code>方法接收一个URL列表，私有方法<code>_parse</code>根据URL的格式来返回字符串model，字符串的可选值是<code>Comic</code>和<code>Chapter</code>，<code>&#39;&#123;&#125;(url)&#39;.format(model)</code>生成字符串表达式，再通过<code>eval()</code>来构造实例对象，<code>self._queue[model].put()</code>把实例对象放到队列中。<code>crawl</code>方法创建并启动线程，<code>CrawlerThread</code>是一个线程类，重写<code>run</code>方法定义线程任务，<code>name</code>属性用来区分线程的工作类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CrawlerThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, handler, crawler, name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name=name)</span><br><span class="line">        self.crawler = crawler</span><br><span class="line">        self.handler = handler</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> interrupt:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                task = self.crawler.get(self.name)</span><br><span class="line">                <span class="keyword">if</span> self.handler(task):</span><br><span class="line">                    self.crawler.put(self.name, task)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.crawler.exception(self.name, task)</span><br><span class="line">                self.crawler.finish(self.name)</span><br><span class="line">            <span class="keyword">except</span> Empty:</span><br><span class="line">                <span class="keyword">if</span> self.crawler.complete(self.name):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Crawler</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._queue = &#123;<span class="string">&#x27;Comic&#x27;</span>: Queue(), <span class="string">&#x27;Chapter&#x27;</span>: Queue(), <span class="string">&#x27;Image&#x27;</span>: Queue()&#125;</span><br><span class="line"></span><br><span class="line">        self._lock = Lock()</span><br><span class="line"></span><br><span class="line">        self._config = config</span><br><span class="line"></span><br><span class="line">        self._log = Log()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> config.mode == <span class="string">&#x27;crawler&#x27;</span>:</span><br><span class="line">            signal(SIGINT, Crawler.sig_handler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">self, urls</span>):</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> urls:</span><br><span class="line">            model, url = self._parse(u)</span><br><span class="line">            <span class="keyword">if</span> model:</span><br><span class="line">                self._queue[model].put(<span class="built_in">eval</span>(<span class="string">&#x27;&#123;&#125;(url)&#x27;</span>.<span class="built_in">format</span>(model)))</span><br><span class="line"></span><br><span class="line">        self.crawl()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crawl</span>(<span class="params">self, comic_thread=<span class="literal">None</span>, chapter_thread=<span class="literal">None</span>, image_thread=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">        comic_threads = [CrawlerThread(handler=Comic.init, crawler=self, name=<span class="string">&#x27;Comic&#x27;</span>)</span><br><span class="line">                         <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(comic_thread <span class="keyword">if</span> comic_thread <span class="keyword">else</span> self._config.threads[<span class="number">0</span>])]</span><br><span class="line"></span><br><span class="line">        chapter_threads = [CrawlerThread(handler=Chapter.init, crawler=self, name=<span class="string">&#x27;Chapter&#x27;</span>)</span><br><span class="line">                           <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(chapter_thread <span class="keyword">if</span> chapter_thread <span class="keyword">else</span> self._config.threads[<span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line">        image_threads = [CrawlerThread(handler=Image.download, crawler=self, name=<span class="string">&#x27;Image&#x27;</span>)</span><br><span class="line">                         <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(image_thread <span class="keyword">if</span> image_thread <span class="keyword">else</span> self._config.threads[<span class="number">2</span>])]</span><br><span class="line"></span><br><span class="line">        [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> comic_threads]</span><br><span class="line">        <span class="keyword">if</span> config.mode == <span class="string">&#x27;crawler&#x27;</span>:</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">        [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> chapter_threads]</span><br><span class="line">        <span class="keyword">if</span> config.mode == <span class="string">&#x27;crawler&#x27;</span>:</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">        [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> image_threads]</span><br><span class="line"></span><br><span class="line">        [t.join() <span class="keyword">for</span> t <span class="keyword">in</span> (*comic_threads, *chapter_threads, *image_threads)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> interrupt:</span><br><span class="line">            self.serialize()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse</span>(<span class="params">self, raw_url</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            instance = Model.find(raw_url)</span><br><span class="line">            url = instance.curl(raw_url)</span><br><span class="line">            <span class="keyword">if</span> url:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Chapter&#x27;</span>, url</span><br><span class="line">            url = instance.url(raw_url)</span><br><span class="line">            <span class="keyword">if</span> url:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Comic&#x27;</span>, url</span><br><span class="line">        <span class="keyword">except</span> ComicdError:</span><br><span class="line">            self._log.warning(<span class="string">&#x27;cannot handle url &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(raw_url))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, raw_url</span><br><span class="line">            </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sig_handler</span>(<span class="params">signum, frame</span>):</span><br><span class="line">        <span class="keyword">global</span> interrupt</span><br><span class="line">        interrupt = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><code>Crawler</code>实例在初始化时设定了捕捉<code>SIGINT</code>信号，如果检测到Ctrl+C信号，则调用<code>sig_handler</code>方法把<code>interrupt</code>设置成True，在<code>crawl</code>方法中如果发现线程不是自动结束而是被<code>interrupt</code>标志给终止时，调用<code>serialize</code>方法把三个队列中未处理的实例序列化到本地，对应的实现了一个反序列化的方法<code>deserialize</code>可以快速恢复到上一次终止的状态，这样就实现了断点续传的功能了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Crawler</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">serialize</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self._config.serialize, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            dump((self._queue[<span class="string">&#x27;Comic&#x27;</span>].queue, self._queue[<span class="string">&#x27;Chapter&#x27;</span>].queue, self._queue[<span class="string">&#x27;Image&#x27;</span>].queue), f)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deserialize</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exists(self._config.serialize):</span><br><span class="line">            self._log.error(<span class="string">&#x27;no serialize file found&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self._config.serialize, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            q1, q2, q3 = load(f)</span><br><span class="line">            [self._queue[<span class="string">&#x27;Comic&#x27;</span>].put(item) <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>(q1)]</span><br><span class="line">            [self._queue[<span class="string">&#x27;Chapter&#x27;</span>].put(item) <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>(q2)]</span><br><span class="line">            [self._queue[<span class="string">&#x27;Image&#x27;</span>].put(item) <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>(q3)]</span><br><span class="line"></span><br><span class="line">        self.crawl()</span><br></pre></td></tr></table></figure><p>线程类的<code>run</code>方法定义了线程功能，主要逻辑是从队列获取元素，处理完成之后放到下一级队列中，如果队列为空需要判断自身是否满足退出条件，满足则退出线程否则进行下一轮循环。不同功能的线程处理方式略有不同，通过创建线程时指定的线程名作为判断线程功能的标记。每个实例对象都有一个<code>repeat</code>属性用来标记实例被处理的次数，如果实例处理失败了，在未超过预设定的重复次数之前会被重新放到队列中等待下次处理，一定程度上排除网络原因带来的干扰。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Crawler</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, name, task</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;Comic&#x27;</span>:</span><br><span class="line">            <span class="keyword">for</span> chapter <span class="keyword">in</span> task.chapters:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self._queue[<span class="string">&#x27;Chapter&#x27;</span>].put(Chapter(chapter[<span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">except</span> ComicdError:</span><br><span class="line">                    self._log.warning(<span class="string">&#x27;cannot handle url &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(chapter[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&#x27;Chapter&#x27;</span>:</span><br><span class="line">            f = Folder(self._config.home, task.title, task.ctitle)</span><br><span class="line">            self._queue[<span class="string">&#x27;Image&#x27;</span>].put(f)</span><br><span class="line">            <span class="keyword">for</span> image <span class="keyword">in</span> task.images:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self._queue[<span class="string">&#x27;Image&#x27;</span>].put(Image(image[<span class="number">1</span>], task.instance,</span><br><span class="line">                                                   join(f.path, image[<span class="number">0</span>]),</span><br><span class="line">                                                   task.url, task.title,</span><br><span class="line">                                                   task.ctitle, image[<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">except</span> ComicdError:</span><br><span class="line">                    self._log.warning(<span class="string">&#x27;cannot handle url &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(image[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;Comic&#x27;</span> <span class="keyword">or</span> name == <span class="string">&#x27;Chapter&#x27;</span>:</span><br><span class="line">            task = self._queue[name].get(timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># name == &#x27;Image&#x27;</span></span><br><span class="line">            <span class="keyword">with</span> self._lock:</span><br><span class="line">                task = self._queue[name].get(timeout=<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">isinstance</span>(task, Folder):</span><br><span class="line">                    task.create()</span><br><span class="line">                    self._log.info(<span class="string">&#x27; &lt;&#x27;</span> + task.title + <span class="string">&#x27;&gt; &#x27;</span> + task.ctitle)</span><br><span class="line">                    task = self._queue[name].get(timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> task</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">finish</span>(<span class="params">self, name</span>):</span><br><span class="line">        self._queue[name].task_done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">complete</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;Comic&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&#x27;Chapter&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> self._queue[<span class="string">&#x27;Comic&#x27;</span>].empty()</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&#x27;Image&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> self._queue[<span class="string">&#x27;Comic&#x27;</span>].empty() <span class="keyword">and</span> self._queue[<span class="string">&#x27;Chapter&#x27;</span>].empty()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exception</span>(<span class="params">self, name, task</span>):</span><br><span class="line">        <span class="keyword">if</span> task.repeat &gt;= self._config.repeat:</span><br><span class="line">            self._log.warning(<span class="string">&#x27;handle task &#123;&#125; failed&#x27;</span>.<span class="built_in">format</span>(task))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            task.repeat += <span class="number">1</span></span><br><span class="line">            self._queue[name].put(task)</span><br></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>最后一步用上述功能类来组装一个脚本程序完成漫画下载的功能。标准库的<code>argparse</code>包可以很方便的给脚本添加参数，我这里设置了三个参数，<code>—url</code>参数是一个URL的列表，包含了所有需要下载的某个漫画或某个章节的地址列表，<code>—resume</code>参数恢复上一次终止的任务，<code>—file</code>参数指定文件名，从文件中读取地址列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">comicd</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exists(config.home):</span><br><span class="line">        makedirs(config.home)</span><br><span class="line"></span><br><span class="line">    parser = ArgumentParser(description=<span class="string">&#x27;Comic Download Tool&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--url&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, dest=<span class="string">&#x27;urls&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;urls of comics&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-r&#x27;</span>, <span class="string">&#x27;--resume&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, default=<span class="literal">False</span>, dest=<span class="string">&#x27;resume&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;resume last crawl task&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--file&#x27;</span>, action=<span class="string">&#x27;store&#x27;</span>, dest=<span class="string">&#x27;file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;crawl from file&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    urls = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> comicd.crawler <span class="keyword">import</span> Crawler</span><br><span class="line">    crawler = Crawler()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.resume:</span><br><span class="line">        crawler.deserialize()</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.urls:</span><br><span class="line">        urls = args.urls</span><br><span class="line">    <span class="keyword">elif</span> args.file:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(args.file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            urls = [u <span class="keyword">for</span> u <span class="keyword">in</span> f.readlines()]</span><br><span class="line"></span><br><span class="line">    crawler.initialize(urls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    comicd()</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>comicd提供了<code>Comic</code>, <code>Chapter</code>, <code>Config</code>和<code>ComicdError</code>作为外部使用的编程接口，全部写入到__init__.py的<code>__all__</code>变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> comicd.model <span class="keyword">import</span> Comic, Chapter</span><br><span class="line"><span class="keyword">from</span> comicd.config <span class="keyword">import</span> config <span class="keyword">as</span> Config</span><br><span class="line"><span class="keyword">from</span> comicd.error <span class="keyword">import</span> ComicdError</span><br><span class="line"></span><br><span class="line">__all__ = [</span><br><span class="line">    <span class="string">&#x27;Comic&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Chapter&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Config&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ComicdError&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>setup.py填写基本的配置信息，指定脚本名为<code>comic</code>，配置好依赖，当然在这个项目里requirements.txt内容是空的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"></span><br><span class="line">requirements = <span class="built_in">open</span>(<span class="string">&#x27;requirements.txt&#x27;</span>).readlines()</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;comicd&#x27;</span>,</span><br><span class="line">    version=<span class="string">&#x27;0.0.1&#x27;</span>,</span><br><span class="line">    author=<span class="string">&#x27;fancxxy&#x27;</span>,</span><br><span class="line">    author_email=<span class="string">&#x27;fancxxy@gmail.com&#x27;</span>,</span><br><span class="line">    url=<span class="string">&#x27;https://github.com/fancxxy/comicd&#x27;</span>,</span><br><span class="line">    description=<span class="string">&#x27;comic download tool&#x27;</span>,</span><br><span class="line">    scripts=[<span class="string">&#x27;comic&#x27;</span>],</span><br><span class="line">    license=<span class="string">&#x27;MIT&#x27;</span>,</span><br><span class="line">    classifiers=[],</span><br><span class="line">    packages=find_packages(exclude=(<span class="string">&#x27;tests&#x27;</span>,)),</span><br><span class="line">    install_requires=requirements</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;为了解决自己喜欢看漫画却没有好的观看体验的问题，用Python写了工具comicd，配合iOS上的iComics体验有了质的提升，不用再去忍受各种web和APP的弹窗推送。&lt;/p&gt;
&lt;p&gt;comicd完全使用Python3标准库编写，未使用第三方模块，这篇文章是回顾我开发的过程，记录当时的一些思路，涉及到的知识点有基本Python语法、多线程、HTTP协议等。&lt;/p&gt;
&lt;p&gt;comicd可以以命令的方式运行，也可以以包的形式导入作为应用代码的接口，目前支持的站点有腾讯漫画、网易漫画、动漫之家、动漫屋，想要自定义添加新的站点，只需要继承抽象接口类并实现所有必要的方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://fancxxy.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
